import{_ as i,M as l,p as d,q as r,R as a,t as s,N as c,a1 as e}from"./framework-96b046e1.js";const o="/assets/image-20230411102555096-c224017f.png",t="/assets/image-20230411115449814-ea5fa2fe.png",p="/assets/image-20230411121606257-ec3d4dfb.png",u="/assets/image-20230411194600032-e7e1eb34.png",v="/assets/image-20230412135229519-da7e4007.png",m="/assets/image-20230412135459904-e9ca1a29.png",b={},k=e('<h1 id="dcoker" tabindex="-1"><a class="header-anchor" href="#dcoker" aria-hidden="true">#</a> Dcoker</h1><h2 id="容器技术" tabindex="-1"><a class="header-anchor" href="#容器技术" aria-hidden="true">#</a> 容器技术</h2><h3 id="容器技术的起源" tabindex="-1"><a class="header-anchor" href="#容器技术的起源" aria-hidden="true">#</a> 容器技术的起源</h3><ol><li>程序员开发代码时需要从零搭建一套开发环境，开发完成转交测试时，测试人员又需要从零搭建一套测试环境，测试完成之后达到了上线的标准，这时会将程序交给运维人员，那么运维人员又需要从零搭建一套运行环境，我靠？？这么麻烦光是搭建环境就要搭建三次？？</li><li>解决这种办法也有，那就是开发人员在虚拟机上搭建一套环境，然后再将虚拟机COPY给测试和运维，貌似这也是一个解决办法（在没有容器技术之前）！但是这种方式确实没有那么好~~</li></ol><h3 id="容器技术-vs-虚拟机" tabindex="-1"><a class="header-anchor" href="#容器技术-vs-虚拟机" aria-hidden="true">#</a> 容器技术 vs 虚拟机</h3><ol><li><p>虚拟机</p><ul><li>虚拟机（virtual machine）是在操作系统中模拟硬件设备，然后运行另一个操作系统，比如在 Windows 系统里面运行 Ubuntu 系统，这样就可以运行任意的Ubuntu应用了。</li></ul></li><li><p>容器技术</p><ul><li>容器一词的英文是container，其实container还有集装箱的意思。</li><li>现代软件开发的一大目的就是隔离，应用程序在运行时相互独立互不干扰，这种隔离实现起来是很不容易的，其中一种解决方案就是上面提到的虚拟机技术，通过将应用程序部署在不同的虚拟机中从而实现隔离。</li></ul></li><li><p>容器技术（容器是一种通用技术，Dcoker只是其中的一种实现，下面介绍Dcoker）和虚拟机的差异：</p><ul><li>容器技术（Dcoker）是一个系统进程</li><li>虚拟机是在操作系统中的操作系统</li><li>Dcoker体积小、启动速度快、性能好</li><li>虚拟机体积大、启动速度慢、性能一般</li></ul><p><img src="'+o+'" alt="image-20230411102555096"></p></li></ol><h2 id="初识-dcoker" tabindex="-1"><a class="header-anchor" href="#初识-dcoker" aria-hidden="true">#</a> 初识 Dcoker</h2><h3 id="dcoker-简介" tabindex="-1"><a class="header-anchor" href="#dcoker-简介" aria-hidden="true">#</a> Dcoker 简介</h3><ol><li><p>容器是一种通用技术，Dcoker只是其中的一种实现。</p></li><li><p>Dcoker是一个用Go语言实现的开源项目，可以让我们方便的创建和使用容器，Dcoker将程序以及程序所有的依赖都打包到Dcoker container，这样你的程序可以在任何环境都会有一致的表现，Dcoker可以屏蔽环境差异，也就是说，只要你的程序打包到了Dcoker中，那么无论运行在什么环境下程序的行为都是一致的。</p></li><li><p>Dcoker的另一个好处就是快速部署，这是当前互联网公司最常见的一个应用场景，一个原因在于容器启动速度非常快，另一个原因在于只要确保一个容器中的程序正确运行，那么你就能确信无论在生产环境部署多少都能正确运行。</p></li><li><p>Dcoker特点总结</p><ul><li>可以将程序及其依赖、运行环境一起打包为一个镜像，可以迁移到任意Linux操作系统。</li><li>运行时利用沙箱机制形成隔离容器，各个应用互不干扰。</li><li>启动、移除都可以通过一行命令完成，方便快捷。</li></ul></li></ol><h3 id="dcoker-镜像和容器" tabindex="-1"><a class="header-anchor" href="#dcoker-镜像和容器" aria-hidden="true">#</a> Dcoker 镜像和容器</h3><ol><li><p>Dcoker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。</p></li><li><p>镜像中的应用程序运行后形成的进程就是容器，只是Dcoker会给容器做隔离，对外不可见。</p></li></ol><h3 id="dcokerhub" tabindex="-1"><a class="header-anchor" href="#dcokerhub" aria-hidden="true">#</a> DcokerHub</h3><ol><li><p>DcokerHub：DcokerHub是一个Dcoker镜像的托管平台。这样的平台称为Dcoker Registry。</p></li><li><p>国内也有类似于DcokerHub 的公开服务，比如 网易云镜像服务、阿里云镜像库等。</p></li></ol><h3 id="dcoker-架构" tabindex="-1"><a class="header-anchor" href="#dcoker-架构" aria-hidden="true">#</a> Dcoker 架构</h3><ol><li>Dcoker是基于CS架构模式，分成服务端(server)和客户端(client)。</li><li>服务端(server)：Dcoker守护进程，负责处理Dcoker指令，管理镜像、容器等。</li><li>客户端(client)：通过命令或RestAPI向Dcoker服务端发送指令。可以在本地或远程向服务端发送指令。</li></ol><h2 id="docker-简单操作" tabindex="-1"><a class="header-anchor" href="#docker-简单操作" aria-hidden="true">#</a> Docker 简单操作</h2>',16),h=a("li",null,"Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。",-1),g=a("code",null,"stable",-1),x=a("code",null,"test",-1),f=a("code",null,"nightly",-1),y={href:"https://docs.docker.com/install/",target:"_blank",rel:"noopener noreferrer"},q=a("li",null,"Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10， CentOS 7 满足最低内核的要求，我使用的CentOS 8。",-1),D=e(`<h3 id="centos安装docker" tabindex="-1"><a class="header-anchor" href="#centos安装docker" aria-hidden="true">#</a> CentOS安装Docker</h3><ol><li><p>卸载（可选）</p><ul><li><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum remove <span class="token function">docker</span> <span class="token punctuation">\\</span>
                  docker-client <span class="token punctuation">\\</span>
                  docker-client-latest <span class="token punctuation">\\</span>
                  docker-common <span class="token punctuation">\\</span>
                  docker-latest <span class="token punctuation">\\</span>
                  docker-latest-logrotate <span class="token punctuation">\\</span>
                  docker-logrotate <span class="token punctuation">\\</span>
                  docker-selinux <span class="token punctuation">\\</span>
                  docker-engine-selinux <span class="token punctuation">\\</span>
                  docker-engine <span class="token punctuation">\\</span>
                  docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>安装docker</p><ul><li><p>首先需要虚拟机联网，安装yum工具</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils <span class="token punctuation">\\</span>
           device-mapper-persistent-data <span class="token punctuation">\\</span>
           lvm2 --skip-broken
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后更新本地镜像源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置docker镜像源</span>
yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
    
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/download.docker.com/mirrors.aliyun.com\\/docker-ce/g&#39;</span> /etc/yum.repos.d/docker-ce.repo

<span class="token comment"># 如果报错请使用下面这种方式</span>
yum makecache fast

dnf makecache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后输入命令，docker-ce为社区免费版本。稍等片刻，docker即可安装成功。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>启动docker</p><ul><li><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p><p>启动docker前，一定要关闭防火墙后！！</p><p>启动docker前，一定要关闭防火墙后！！</p><p>启动docker前，一定要关闭防火墙后！！</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 关闭</span>
systemctl stop firewalld
<span class="token comment"># 禁止开机启动防火墙</span>
systemctl disable firewalld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过命令启动docker</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>  <span class="token comment"># 启动docker服务</span>

systemctl stop <span class="token function">docker</span>  <span class="token comment"># 停止docker服务</span>

systemctl restart <span class="token function">docker</span>  <span class="token comment"># 重启docker服务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>然后输入命令，查看docker是否启动成功（两种方式）</p><ul><li><p>查看docker版本</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看docker状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl status <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+t+`" alt="image-20230411115449814"></p></li></ul></li></ul></li><li><p>配置镜像加速</p><ul><li><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务，参考阿里云的镜像加速文档：https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors。</p></li><li><p>通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker
<span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;-</span><span class="token string">&#39;EOF&#39;
{
  &quot;registry-mirrors&quot;: [&quot;https://jxa7jhwn.mirror.aliyuncs.com&quot;]
}
EOF</span>
<span class="token function">sudo</span> systemctl daemon-reload
<span class="token function">sudo</span> systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="docker-操作镜像常用命令" tabindex="-1"><a class="header-anchor" href="#docker-操作镜像常用命令" aria-hidden="true">#</a> Docker 操作镜像常用命令</h3><ol><li><p>dockerhub镜像网站：https://hub.docker.com/</p></li><li><p>关于docker镜像命名问题</p><ul><li><p>镜像名称一般分两部分组成：[repository]:[tag]，在没有指定tag时，默认是latest，代表最新版本的镜像。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span>repository<span class="token punctuation">]</span><span class="token operator">:</span><span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span> mysql<span class="token operator">:</span><span class="token number">8.0</span><span class="token number">.30</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>docker命令有很多，了可以通过 <code>docker --help</code> 来获取帮助，下面介绍几个常用的命令。</p><ul><li><p>docker pull [repository]:[tag]，从dockerhub中拉起镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 从dockerhub中 拉取nginx镜像(未指定tag时，默认是latest)</span>
<span class="token function">docker</span> pull nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>docker push：将本地镜像推到远程仓库</p></li><li><p>docker images：查看本地镜像列表</p></li></ul><p><img src="`+p+`" alt="image-20230411121606257"></p><ul><li><p>docker save： Save one or more images to a tar archive (streamed to STDOUT by default)（将镜像导出成一个tar文件）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save <span class="token parameter variable">-o</span> ./nginx.tar nginx:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>docker load：Load an image from a tar archive or STDIN（将tar文件加载成镜像文件）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> load <span class="token parameter variable">-i</span> ./nginx.tar <span class="token parameter variable">-q</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>docker rmi：Remove one or more images（删除镜像）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi nginx:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="拉取redis镜像练习" tabindex="-1"><a class="header-anchor" href="#拉取redis镜像练习" aria-hidden="true">#</a> 拉取redis镜像练习</h3><ol><li><p>从dockerhub中拉取redis镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看redis镜像名称和版本信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis        latest    7614ae9453d1   <span class="token number">15</span> months ago   113MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将redis镜像打包成一个redis.tar文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save <span class="token parameter variable">-o</span> ./redis.tar redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除本地redis镜像文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> rmi redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将redis.tar文件加载到本地镜像列表中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> load <span class="token parameter variable">-i</span> ./redis.tar 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="docker-操作容器常用命令" tabindex="-1"><a class="header-anchor" href="#docker-操作容器常用命令" aria-hidden="true">#</a> Docker 操作容器常用命令</h3><ol><li>docker run： 启动容器</li><li>docker pause：容器从<code>运行状态</code>切换到<code>暂停状态</code></li><li>docker unpause：容器从<code>暂停状态</code>恢复到<code>运行状态</code></li><li>docker stop：容器从<code>运行状态</code>切换到到<code>停止状态</code>（进程被干掉）</li><li>docker start：将容器状态切换为<code>运行状态</code>（容器被stop情况下）</li><li>docker rm：删除指定容器</li><li>docker ps：查看所有运行的容器和状态</li><li>docker logs：查看指定容器运行日志</li><li>docker exec：进入容器内部执行命令</li></ol><h3 id="创建并运行nginx容器" tabindex="-1"><a class="header-anchor" href="#创建并运行nginx容器" aria-hidden="true">#</a> 创建并运行Nginx容器</h3><ol><li><p>可以参考dockerhub中关于操作nginx容器的命令：https://hub.docker.com/_/nginx</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> nginxContainer <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>docker run：创建容器</li><li>--name ：容器名称</li><li>-p 8080:80， 端口映射（左边是宿主机端口，右边是容器端口）</li><li>-d：后台运行</li><li>nginx：镜像名称</li></ul></li><li><p>查看nginx运行日志</p><ul><li>-f 持续查看日志</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs nginxContainer <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>修改nginx的主页将“Welcome to nginx!”字样改成“Hi Ilovesshan， Weclome！”</p><ul><li><p>先通过 docker exec 命令进入到nginx内部</p><ul><li>docker exec：进入到容器内部</li><li>-it：给当前进入的容器创建一个标准输入、输出终端，允许我们与容器交互</li><li>nginxContainer：要进入的容器的名称</li><li>bash：进入容器后执行的命令，bash是一个linux终端交互命令</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> nginxContainer <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>进入到静态界面路径（包含50x.html和index.html两个文件）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /usr/share/nginx/html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>一般情况下修改文件可以使用vim，由于当前容器是一个阉割版的linux，只是包含了nginx的运行环境和依赖，那就只有采用下面这些办法修改文件信息了，exec命令可以进入容器修改文件，但是在容器内修改文件是不推荐的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s#Welcome to nginx#Hi Ilovesshan， Weclome~#g&#39;</span> index.html
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#39;</span> index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>退出容器环境</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>查看容器运行状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token comment"># 当前正在运行的容器信息</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token comment"># 全部的容器信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>停止容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> stop nginxContainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="创建并运行redis容器-实现数据持久化" tabindex="-1"><a class="header-anchor" href="#创建并运行redis容器-实现数据持久化" aria-hidden="true">#</a> 创建并运行Redis容器，实现数据持久化</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull redis

<span class="token function">docker</span> run <span class="token parameter variable">--name</span> redisContainer <span class="token parameter variable">-d</span> redis

<span class="token builtin class-name">cd</span> /usr/local/bin/

./redis-cli

<span class="token builtin class-name">set</span> name ilovesshan

get name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="docker-数据卷" tabindex="-1"><a class="header-anchor" href="#docker-数据卷" aria-hidden="true">#</a> Docker 数据卷</h2><h3 id="什么是数据卷" tabindex="-1"><a class="header-anchor" href="#什么是数据卷" aria-hidden="true">#</a> 什么是数据卷</h3><ol><li><p>先看几个问题</p><ul><li>数据不便于修改（修改nginx的欢迎主页 index.html） <ul><li>当我们要修改Nginx的html内容时，需要进入容器内部修改，很不方便。</li></ul></li><li>数据不可服用 <ul><li>在容器内的修改对外是不可见的。所有修改对新创建的容器是不可复用的。</li></ul></li><li>审计维护困难 <ul><li>数据在容器内，如果要升级容器必然删除旧容器，所有数据都跟着删除了。</li></ul></li></ul></li><li><p>docker容器运行期间产生的数据文件，在容器被删除这些文件是会丢失的，但是希望其中部分文件能够保存下来，而且同时希望容器和容器之间能够数据共享。</p></li><li><p>数据卷（volume）是一个虚拟目录，指向宿主机文件系统中的某个目录。</p></li><li><p>一般地来说，docker容器数据卷可以看成常用的u盘，它存在于一个或多个的容器中，由docker挂载到容器，但不属于联合文件系统，Docker不会在容器删除时删除其挂载的数据卷。</p><p><img src="`+u+`" alt="image-20230411194600032"></p></li></ol><h3 id="数据卷常用命令" tabindex="-1"><a class="header-anchor" href="#数据卷常用命令" aria-hidden="true">#</a> 数据卷常用命令</h3><ol><li>通过执行 <code>docker volume --help</code> 查看 docker volume 相关的命令信息</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Usage:  <span class="token function">docker</span> volume COMMAND

Manage volumes

Commands:
  create      Create a volume
  inspect     Display detailed information on one or <span class="token function">more</span> volumes
  <span class="token function">ls</span>          List volumes
  prune       Remove all unused <span class="token builtin class-name">local</span> volumes
  <span class="token function">rm</span>          Remove one or <span class="token function">more</span> volumes

Run <span class="token string">&#39;docker volume COMMAND --help&#39;</span> <span class="token keyword">for</span> <span class="token function">more</span> information on a command.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>创建数据卷</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume create html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看数据卷列表</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>volume <span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看指定数据卷详细信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume inspect html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token string">&quot;CreatedAt&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;2023-04-11T19:53:25+08:00&quot;</span>,
        <span class="token string">&quot;Driver&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;local&quot;</span>,
        <span class="token string">&quot;Labels&quot;</span><span class="token builtin class-name">:</span> null,
        <span class="token string">&quot;Mountpoint&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;/var/lib/docker/volumes/html/_data&quot;</span>, <span class="token comment"># 数据卷路径</span>
        <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;html&quot;</span>,
        <span class="token string">&quot;Options&quot;</span><span class="token builtin class-name">:</span> null,
        <span class="token string">&quot;Scope&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;local&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>删除未使用的数据卷</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume prune
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除一个/多个数据卷</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> volume <span class="token function">rm</span> html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="创建ngxin容器并挂载数据卷" tabindex="-1"><a class="header-anchor" href="#创建ngxin容器并挂载数据卷" aria-hidden="true">#</a> 创建Ngxin容器并挂载数据卷</h3><ol><li><p>创建nginx容器并把把html数据卷挂载到容器内的/usr/share/nginx/html这个目录中。</p><ul><li>-v 数据卷名称:容器内目录（如果数据卷不存在，Docker会默认进行创建）</li><li>其他参数上面说过，就不解释了~~</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--name</span> nginxContainer <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> html:/usr/share/nginx/html nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>进入到数据卷目录中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /var/lib/docker/volumes/html/_data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>通过vim 编辑 index.html文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="创建mysql容器并将宿主机目录直接挂载到容器" tabindex="-1"><a class="header-anchor" href="#创建mysql容器并将宿主机目录直接挂载到容器" aria-hidden="true">#</a> 创建MySQL容器并将宿主机目录直接挂载到容器</h3><ol><li><p>提示：目录挂载与数据卷挂载的语法是类似的：</p><ul><li>-v [宿主机目录]:[容器内目录]</li><li>-v [宿主机文件]:[容器内文件]</li></ul></li><li><p>先将mysql.tar上传到/tmp目录下，然后再将mysql.tar加载到docker镜像中</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> docker load -i /tmp/mysql.tar 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建目录/tmp/mysql/data</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /tmp/mysql/data<span class="token operator">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建目录/tmp/mysql/conf</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /tmp/mysql/conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在tmp/mysql/conf下新建一个hmy.cnf文件，并输入一下信息。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
skip-name-resolve
<span class="token assign-left variable">character_set_server</span><span class="token operator">=</span>utf8
<span class="token assign-left variable">datadir</span><span class="token operator">=</span>/var/lib/mysql
server-id<span class="token operator">=</span><span class="token number">1000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>去DockerHub查阅资料，创建并运行MySQL容器，要求：</p><ul><li><p>挂载/tmp/mysql/data到mysql容器内数据存储目录（/var/lib/mysql）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-v</span> /tmp/mysql/data:/var/lib/mysql 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>挂载/tmp/mysql/conf/hmy.cnf到mysql容器的配置文件（/etc/mysql/conf.d/hmy.cnf）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-v</span> /tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>设置MySQL密码（-e 表示环境变量）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span> mysqlContainer <span class="token punctuation">\\</span>
<span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\\</span>
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /tmp/mysql/data:/var/lib/mysql <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
mysql:5.7.25 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="dockerfile-自定义镜像" tabindex="-1"><a class="header-anchor" href="#dockerfile-自定义镜像" aria-hidden="true">#</a> DockerFile 自定义镜像</h2><h3 id="镜像结构" tabindex="-1"><a class="header-anchor" href="#镜像结构" aria-hidden="true">#</a> 镜像结构</h3><ol><li>镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</li><li>镜像是分层结构，每一层称为一个Layer <ul><li>BaseImage层：包含基本的系统函数库、环境变量、文件系统</li><li>Entrypoint：入口，是镜像中应用启动的命令</li><li>其它：在BaseImage基础上添加依赖、安装程序、完成整个应用的安装和配置（每添加一次就是新的一层Layer）。</li></ul></li></ol><h3 id="dockerfile语法" tabindex="-1"><a class="header-anchor" href="#dockerfile语法" aria-hidden="true">#</a> Dockerfile语法</h3><ol><li><p>Dockerfile就是一个文本文件，其中包含一个个的指令(Instruction)，用指令来说明要执行什么操作来构建镜像。每一个指令都会形成一层Layer。</p></li><li><p>更新详细语法说明，请参考官网文档： https://docs.docker.com/engine/reference/builder</p><table><thead><tr><th><strong>指令</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像</td><td>FROM centos:6</td></tr><tr><td>ENV</td><td>设置环境变量，可在后面指令使用</td><td>ENV key value</td></tr><tr><td>COPY</td><td>拷贝本地文件到镜像的指定目录</td><td>COPY ./mysql-5.7.rpm /tmp</td></tr><tr><td>RUN</td><td>执行Linux的shell命令，一般是安装过程的命令</td><td>RUN yum install gcc</td></tr><tr><td>EXPOSE</td><td>指定容器运行时监听的端口，是给镜像使用者看的</td><td>EXPOSE 8080</td></tr><tr><td>ENTRYPOINT</td><td>镜像中应用的启动命令，容器运行时调用</td><td>ENTRYPOINT java -jar xx.jar</td></tr></tbody></table></li></ol><h3 id="基于ubuntu镜像构建新镜像" tabindex="-1"><a class="header-anchor" href="#基于ubuntu镜像构建新镜像" aria-hidden="true">#</a> 基于Ubuntu镜像构建新镜像</h3><ol><li><p>新建一个空目录docker-demo</p></li><li><p>上传文件</p><ul><li>docker-demo.jar（课程资料下载）</li><li>jdk8.tar.gz（课程资料下载）</li></ul></li><li><p>编写dockerFile文件</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 指定基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:16.04</span>
<span class="token comment"># 配置环境变量，JDK的安装目录</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_DIR=/usr/local</span>

<span class="token comment"># 拷贝jdk和java项目的包</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./jdk8.tar.gz <span class="token variable">$JAVA_DIR</span>/</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./docker-demo.jar /tmp/app.jar</span>

<span class="token comment"># 安装JDK</span>
<span class="token instruction"><span class="token keyword">RUN</span> cd <span class="token variable">$JAVA_DIR</span> <span class="token operator">\\</span>
 &amp;&amp; tar -xf ./jdk8.tar.gz <span class="token operator">\\</span>
 &amp;&amp; mv ./jdk1.8.0_144 ./java8</span>

<span class="token comment"># 配置环境变量</span>
<span class="token instruction"><span class="token keyword">ENV</span> JAVA_HOME=<span class="token variable">$JAVA_DIR</span>/java8</span>
<span class="token instruction"><span class="token keyword">ENV</span> PATH=<span class="token variable">$PATH</span>:<span class="token variable">$JAVA_HOME</span>/bin</span>

<span class="token comment"># 暴露端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8090</span>
<span class="token comment"># 入口，java项目的启动命令</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /tmp/app.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构建镜像文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> javaweb:1.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>运行容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> run <span class="token parameter variable">--name</span> javaweb <span class="token parameter variable">-p</span> <span class="token number">8090</span>:8090 <span class="token parameter variable">-d</span> javaweb:1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>访问：http://192.168.186.129:8090/hello/count</p></li></ol><h3 id="基于java-8-alpine镜像" tabindex="-1"><a class="header-anchor" href="#基于java-8-alpine镜像" aria-hidden="true">#</a> 基于java:8-alpine镜像</h3><ol><li><p>步骤和基于Ubuntu镜像构建新镜像一样的，只不过需要更改一下dockerfile文件，现在是基于java:8-alpine镜像来构建了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 指定基础镜像</span>
FROM java:8-alpine
<span class="token comment"># 拷贝java项目的包</span>
COPY ./docker-demo.jar /tmp/app.jar
<span class="token comment"># 暴露端口</span>
EXPOSE <span class="token number">8090</span>
<span class="token comment"># 入口，java项目的启动命令</span>
ENTRYPOINT <span class="token function">java</span> <span class="token parameter variable">-jar</span> /tmp/app.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>重新构建镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> javaweb:2.0 <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>运行镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">docker</span> run <span class="token parameter variable">--name</span> javaweb <span class="token parameter variable">-p</span> <span class="token number">8090</span>:8090 <span class="token parameter variable">-d</span> javaweb:2.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="dockercompose" tabindex="-1"><a class="header-anchor" href="#dockercompose" aria-hidden="true">#</a> DockerCompose</h2><h3 id="dockercompose-简介" tabindex="-1"><a class="header-anchor" href="#dockercompose-简介" aria-hidden="true">#</a> DockerCompose 简介</h3><ol><li>DockerCompose 是一个基于compose文件帮我们快速部署分布式应用，无须一个一个创建和运行容器。</li><li>compose文件是一个文本文件（yml），compose文件通过指令定义集中的容器该如何运行。</li></ol><h3 id="dockercompose-安装" tabindex="-1"><a class="header-anchor" href="#dockercompose-安装" aria-hidden="true">#</a> DockerCompose 安装</h3><ol><li><p>Linux下需要通过命令下载，如果命令下载很慢，也可以上传课程资料的docker-compose文件到<code>/usr/local/bin/</code>目录下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> https://github.com/docker/compose/releases/download/1.23.1/docker-compose-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">\`</span></span>-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">\`</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>修改文件权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Base自动补全命令（如果这里出现错误，需要修改自己的hosts文件）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 补全命令</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose <span class="token operator">&gt;</span> /etc/bash_completion.d/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;199.232.68.133 raw.githubusercontent.com&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/hosts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="利用dockercompose-集群微服务" tabindex="-1"><a class="header-anchor" href="#利用dockercompose-集群微服务" aria-hidden="true">#</a> 利用DockerCompose 集群微服务</h3><ol><li><p>cloud-demo文件夹，里面分别放各个微服务模块（app.jar和Dockerfile），数据库文件（conf和data目录），docker-compose.yml。</p><ul><li><p>微服务模块的Dockerfile</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> java:8-alpine</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./app.jar /tmp/app.jar</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> java -jar /tmp/app.jar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数据库文件（conf目录/hmy.conf）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
skip-name-resolve
<span class="token assign-left variable">character_set_server</span><span class="token operator">=</span>utf8
<span class="token assign-left variable">datadir</span><span class="token operator">=</span>/var/lib/mysql
server-id<span class="token operator">=</span><span class="token number">1000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>数据库文件（data目录）</p><ul><li><p>通过以下命令查看数据库数据保存的位置</p><div class="language-sqlite line-numbers-mode" data-ext="sqlite"><pre class="language-sqlite"><code>show global variables like &quot;%datadir%&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>可以直接将该路径下的全部文件COPY到data目录下（最好是筛选掉不用的数据库）</p></li></ul></li><li><p>docker-compose.yml</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>version: &quot;3.2&quot;

services:
  <span class="token comment"># 服务名称</span>
  nacos:
  	<span class="token comment"># 镜像</span>
    image: nacos/nacos-server
    <span class="token comment"># 配置环境变量</span>
    environment:
      MODE: standalone
    <span class="token comment"># 端口映射  </span>
    ports:
      - &quot;8848:8848&quot;
  mysql:
    image: mysql:5.7.25
    environment:
      MYSQL_ROOT_PASSWORD: 123
    volumes:
    <span class="token comment"># 数据卷挂载  容器内目录：宿主机目录</span>
      - &quot;$PWD/mysql/data:/var/lib/mysql&quot;
      - &quot;$PWD/mysql/conf:/etc/mysql/conf.d/&quot;
  
  <span class="token comment"># 微服务模块（多个为微服务模块直接书写就ok了）</span>
  userservice:
    build: ./user-service
  orderservice:
    build: ./order-service
    
  <span class="token comment"># 网关</span>
  gateway:
    build: ./gateway
    ports:
      - &quot;10010:10010&quot;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>修改cloud-demo（IDEA中开发的项目，没有就自己新建一个微服务项目~~）项目，将数据库、nacos地址都命名为docker-compose中的服务名。</p></li><li><p>使用maven打包工具，将项目中的每个微服务都打包为app.jar，并将打包好的app.jar拷贝到cloud-demo（刚刚新建的文件夹）中的每一个对应的子目录中。</p></li><li><p>将cloud-demo上传至虚拟机，利用 docker-compose up -d 来部署。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="docker镜像仓库" tabindex="-1"><a class="header-anchor" href="#docker镜像仓库" aria-hidden="true">#</a> Docker镜像仓库</h2><h3 id="docker镜像仓库简介" tabindex="-1"><a class="header-anchor" href="#docker镜像仓库简介" aria-hidden="true">#</a> Docker镜像仓库简介</h3><ol><li>搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现。</li><li>镜像仓库（ Docker Registry ）有公共的和私有的两种形式： <ul><li>公共仓库：例如Docker官方的 Docker Hub，国内也有一些云服务商提供类似于 Docker Hub 的公开服务，比如 网易云镜像服务、DaoCloud 镜像服务、阿里云镜像服务等。</li><li>除了使用公开仓库外，用户还可以在本地搭建私有 Docker Registry。企业自己的镜像最好是采用私有Docker Registry来实现。</li></ul></li><li>官网地址：https://hub.docker.com/_/registry</li></ol><h3 id="简化版镜像仓库" tabindex="-1"><a class="header-anchor" href="#简化版镜像仓库" aria-hidden="true">#</a> 简化版镜像仓库</h3><ol><li><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p></li><li><p>搭建方式比较简单，命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> registry	<span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> registry-data:/var/lib/registry <span class="token punctuation">\\</span>
    registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>命令中挂载了一个数据卷registry-data到容器内的/var/lib/registry 目录，这是私有镜像库存放数据的目录。访问http://YourIp:5000/v2/_catalog 可以查看当前私有镜像服务中包含的镜像。</p></li></ol><h3 id="带有图形化界面版本" tabindex="-1"><a class="header-anchor" href="#带有图形化界面版本" aria-hidden="true">#</a> 带有图形化界面版本</h3><ol><li><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>version: <span class="token string">&#39;3.0&#39;</span>
services:
  registry:
    image: registry
    volumes:
      - ./registry-data:/var/lib/registry
  ui:
    image: joxit/docker-registry-ui:static
    ports:
      - <span class="token number">8080</span>:80
    environment:
      - <span class="token assign-left variable">REGISTRY_TITLE</span><span class="token operator">=</span>Ilovesshan仓库
      - <span class="token assign-left variable">REGISTRY_URL</span><span class="token operator">=</span>http://registry:5000
    depends_on:
      - registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置Docker信任地址</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 打开要修改的文件</span>
<span class="token function">vim</span> /etc/docker/daemon.json
<span class="token comment"># 添加内容：  192.168.186.129 换成本机IP</span>
<span class="token string">&quot;insecure-registries&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;http://192.168.186.129:8080&quot;</span><span class="token punctuation">]</span>
<span class="token comment"># 重加载</span>
systemctl daemon-reload
<span class="token comment"># 重启docker</span>
systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>浏览器访问：http://192.168.186.129:8080/，能看到界面就表示OK了~~</p><p><img src="`+v+`" alt="image-20230412135229519"></p></li></ol><h3 id="私有镜像仓库推送或拉取镜像" tabindex="-1"><a class="header-anchor" href="#私有镜像仓库推送或拉取镜像" aria-hidden="true">#</a> 私有镜像仓库推送或拉取镜像</h3><ol><li><p>推送镜像到私有镜像服务必须先tag，重新tag本地镜像，名称前缀为私有仓库的地址：192.168.150.101:8080/（换成本机IP）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> tag nginx:latest <span class="token number">192.168</span>.186.129:8080/nginx:1.0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>推送镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push <span class="token number">192.168</span>.186.129:8080/nginx:1.0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>再次访问：http://192.168.186.129:8080/，就可以看到多了一个Nginx的镜像~</p><p><img src="`+m+`" alt="image-20230412135459904"></p></li><li><p>拉取镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull <span class="token number">192.168</span>.186.129:8080/nginx:1.0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol>`,48);function _(j,O){const n=l("ExternalLinkIcon");return d(),r("div",null,[k,a("ol",null,[h,a("li",null,[s("Docker CE 分为 "),g,s(),x,s(" 和 "),f,s(" 三个更新频道。官方网站上有各种环境下的 "),a("a",y,[s("安装指南"),c(n)]),s("，这里主要介绍 Docker CE 在 CentOS上的安装。")]),q]),D])}const C=i(b,[["render",_],["__file","docker.html.vue"]]);export{C as default};

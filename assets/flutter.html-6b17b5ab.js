import{_ as n,p as s,q as a,a1 as t}from"./framework-96b046e1.js";const e="/assets/image-20230602194554364-3ad0828f.png",p="/assets/image-20230603134815274-63046191.png",l="/assets/image-20230509095612742-820dd48d.png",i={},o=t('<h1 id="flutter" tabindex="-1"><a class="header-anchor" href="#flutter" aria-hidden="true">#</a> Flutter</h1><h3 id="简单介绍下flutter框架-以及优缺点" tabindex="-1"><a class="header-anchor" href="#简单介绍下flutter框架-以及优缺点" aria-hidden="true">#</a> 简单介绍下Flutter框架，以及优缺点？</h3><ol><li>Flutter是Google推出的一套开源跨平台UI框架，可以快速地在Android、iOS和Web平台上构建高质量的原生用户界面。</li><li>Flutter采用现代响应式框架构建，其中心思想是使用组件来构建应用的UI。当组件的状态发生改变时，组件会重构它的描述，Flutter会对比之前的描述，以确定底层渲染树从当前状态转换到下一个状态所需要的最小更改。</li><li>Flutter优点 <ul><li>借助可移植的GPU加速的渲染引擎实现跨平台。</li><li>热重载（Hot Reload），ctrl+s可以保存并重载，模拟器立马就可以看见效果，相比原生冗长的编译过程强很多。</li><li>一切皆为Widget的理念，可以通过可组合控件集合以及丰富的动画库来构建灵活的丰富的界面。</li></ul></li><li>Flutter缺点 <ul><li>不支持热更新。</li><li>三方库有限，需要自己造轮子。</li><li>Dart语言编写，增加了学习难度。</li></ul></li></ol><h3 id="flutter架构体系" tabindex="-1"><a class="header-anchor" href="#flutter架构体系" aria-hidden="true">#</a> Flutter架构体系？</h3><ol><li><p>Flutter 被设计为一个可扩展的分层系统。它可以被看作是各个独立的组件的系列合集，上层组件各自依赖下层组件。组件无法越权访问更底层的内容，并且框架层中的各个部分都是可选且可替代的，由三大部分组成：FrameWork层、Engine层、Embedder层。</p><p><img src="'+e+'" alt="image-20230602194554364"></p></li><li><p>Flutter的FrameWork层是用Dart语言封装的一套开发类库，它实现了一套基础库。主要包含Material（Android风格UI）和Cupertino（iOS风格）的UI界面，下面是通用的Widgets（组件），之后是一些动画、绘制、渲染、手势库等。这个纯 Dart实现的 SDK被封装为了一个叫作 dart:ui的 Dart库。我们在使用 Flutter写 App的时候，直接导入这个库即可使用组件等功能。</p></li><li><p>Flutter的Engine层毫无疑问是 Flutter 的核心，它主要使用 C++ 编写。当需要绘制新一帧的内容时，引擎将负责对需要合成的场景进行栅格化，它提供了 Flutter 核心 API 的底层实现，包括图形（通过 Skia 2D引擎）、文本布局、文件及网络 IO、辅助功能支持、插件架构和 Dart 运行环境及编译环境的工具链。</p><ul><li><p>光栅化是把绘制指令转换成对应的像素数据，合成是把各图层栅格化后的数据进行相关的叠加和特性处理。</p></li><li><p>Skia 2D的绘图引擎库，Skia 在图形转换、文字渲染、位图渲染方面都提供了友好、高效的表现。Skia是跨平台的，所以可以被嵌入到 Flutter的 iOS SDK中，Android自带了 Skia 2D，所以 Flutter Android SDK要比 iOS SDK小很多。</p></li><li><p>引擎将底层 C++ 代码包装成 Dart 代码，通过 dart:ui 暴露给 Flutter 框架层。该库暴露了最底层的原语，包括用于驱动输入、图形、和文本渲染的子系统的类。</p></li></ul></li><li><p>嵌入层（Embedder）：嵌入层基本是由平台对应的语言实现的，例如：在Android上是由Java和C++实现；在iOS是由Objective-C/Objective-C++实现。嵌入层为Flutter系统提供了一个入口，Flutter系统通过该入口访问底层系统提供的服务，例如输入法，绘制surface等。</p></li></ol><h3 id="移动端跨平台解决方案以及各自优缺点" tabindex="-1"><a class="header-anchor" href="#移动端跨平台解决方案以及各自优缺点" aria-hidden="true">#</a> 移动端跨平台解决方案以及各自优缺点？</h3><ol><li><p>通过webView</p><ul><li>iOS端有UIWebView, Android端WebView，代表有PhoneGap, Apache Cordova, Ionic等。</li><li>主要是通过Html, Css，JS开发页面。对于调用的一些本地服务如相机，蓝牙等。需要通过JS进行桥接调用Native功能的一些功能代码，本身的性能和体验并不理想。</li></ul></li><li><p>React Native、UniApp</p><ul><li><p>RN是FaceBook早先开源的JS框架React在原生移动平台的衍生产物，目前支持iOS和安卓两大平台。RN是使用JS语言，使用类似于HTML的JSX， 以及CSS来做移动开发。</p></li><li><p>RN使用原生自带的UI组件实现核心的渲染引擎，从而保证了良好的渲染性能。但是RN的本质是通过JavaScript VM调用原生接口，通信相对比较低效，并且框架本身不负责渲染，而是间接通过原生进行渲染的。</p></li></ul></li><li><p>Flutter</p><ul><li><p>Flutter拥有自渲染闭环，是理想的跨平台框架</p><ul><li><p>Android渲染流程</p><ul><li>通过Java/kotlin语言调用Android框架提供的framework的API 写出页面布局。</li><li>页面布局通过Android中freamework进行翻译，将翻译结果交给Skia。</li><li>Skia给CPU/GPU 提供数据进行渲染。</li></ul></li><li><p>Flutter渲染流程</p><ul><li>通过Dart语言，调用Flutter的FremeWork层API写出页面布局。</li><li>页面布局通过Flutter框架中framework进行翻译，将翻译的结果提交给Skia。</li><li>Skia给CPU/GPU 提供数据进行渲染。</li></ul></li><li><p>RN渲染流程</p><ul><li>通过JS，CSS，HTML等调用React框架提供的API编写页面布局。</li><li>React框架通过JavaScript VM、 Bridge将JS布局转换成原生布局。</li><li>原生页面布局通过Android中framework层进行翻译，将翻译的结果提交给Skia。</li><li>Skia给CPU/GPU 提供数据进行渲染。</li></ul></li></ul></li><li><p>从上面可以发现，Flutter和安卓的渲染流程是一样的。但是RN渲染流程增加了一步需要桥接才能将JS布局转换成原生布局，所以RN的性能没有Flutter的高。</p></li><li><p>Flutter不需要依赖原生控件，利用Skia绘图引擎，直接通过CPU，GPU进行绘制。和安卓的原生绘制流程一样。</p></li><li><p>而像RN框架，必须先通过桥接的方式转成原生调用，然后再进行渲染。存在性能消耗。</p></li></ul></li></ol><h3 id="flutter的绘制原理" tabindex="-1"><a class="header-anchor" href="#flutter的绘制原理" aria-hidden="true">#</a> Flutter的绘制原理？</h3><ol><li><p>Flutter的绘制流程</p><ul><li>GPU将vsync信号同步到UI线程</li><li>UI线程利用Dart将Flutter代码构建成图层树Layer Three</li><li>图层树在GPU线程内进行Compositer合成</li><li>Compositer合成的结果交给Skia引擎进行渲染</li><li>Skia引擎的渲染结果通过OpenGL或者VulKan交给GPU绘制</li><li>GPU将绘制结果放入到双缓存中的Back Buffer中，当下一个Vsync来时， 系统从Back buffer将当前帧数据复制到Frame Buffer并产生新的一轮GPU/CPU绘制过程。</li></ul></li><li><p>Flutter的绘制流程画图理解</p><p><img src="'+p+`" alt="image-20230603134815274"></p></li><li><p>图像的显示原理</p><ul><li>屏幕上看到的任何东西都是图像，例如：图片、视频、GIT动图等等。</li><li>当图像的连续播放频率超过16帧时人的肉眼会感觉到很流畅，相反当小于16帧时就会感到卡顿。</li></ul></li><li><p>帧率和刷新率的关系</p><ul><li>帧率：每秒钟生成多少帧图像。</li><li>刷新率：显示屏的频率，比如iPhone的屏幕每秒刷新60下，表示为60Hz。</li><li>GPU/CPU生成的图像（每秒生成多少张图片是帧率）会放入到Buffer中，屏幕从Buffer中取图像刷新（每秒刷新多少次是刷新率）后显示。</li></ul></li><li><p>撕裂问题和双重缓存和VSync</p><ul><li>产生撕裂问题原因：当GPU/CPU在新的一帧图片写入一般时，屏幕从Buffer中取图像并进行展示，此时就会出现一张上半部分和下半部分不一致的图像。这种情况我们称为“tearing”（撕裂）。</li><li>双重缓存和VSync：双重缓存和VSync主要是解决撕裂问题。 <ul><li>双重缓存指的是：Back Buffer 和 Frame Buffer， GPU向Back Buffer写数据，屏幕从Frame Buffer读数据。</li><li>VSync是一个信号，它负责从Back Buffer到Frame Buffer的复制操作（底层使用的是指针交换，所以效率很高）。</li><li>某一个时间点，一个屏幕刷新周期完成就会产生一个新的Vsync信号，先完成复制操作再通知CPU/GPU绘制一帧图像，在这种模型下，只有当VSync信号产生时，CPU/GPU才开始绘制。</li></ul></li></ul></li><li><p>双重缓存存在的问题以及解决办法</p><ul><li>双重缓存的缺陷：当CPU/GPU绘制一帧的时间过长（比如超过16ms一个刷新周期时），会产生Jank（画面停顿，甚至空白），VSync信号是在一个刷新周期结束后产生的。</li><li>三重缓存：在每次VSync信号来时，多缓存一个Buffer作为备用。</li></ul></li></ol><h3 id="了解过flutte的vsync-信号吗" tabindex="-1"><a class="header-anchor" href="#了解过flutte的vsync-信号吗" aria-hidden="true">#</a> 了解过Flutte的Vsync 信号吗？</h3><ol><li><p>Flutte的Vsync 信号主要是协调显示器与GPU/CPU的工作，Vsync 信号可同步显示流水线。</p></li><li><p>显示器按照一定的刷新频率从Buffer中（GPU/CPU渲染结果会放入到Buffer中）获取数据，就可以完成图像的更新。现在的手机屏幕一般有60HZ、90HZ、120HZ，以60HZ为例，屏幕每秒会发出 60 个 VSync 垂直同步信号，GPU/CPU每秒绘制的图像帧数叫做：帧率，如果帧率速率大于屏幕刷新率，屏幕上显示的内容就有可能是两个图像的不完全内容，造成图像撕裂，VSync 垂直信号可以保证刷新频率的统一。</p></li><li></li></ol><h3 id="谈谈你对widget构建过程的理解" tabindex="-1"><a class="header-anchor" href="#谈谈你对widget构建过程的理解" aria-hidden="true">#</a> 谈谈你对Widget构建过程的理解？</h3><ol><li><p>创建Widget时会创建一个对应的Element。</p></li><li><p>在Element中会做几件事情：</p><ul><li><p>调用Element的mount方法 本质是调用自己写的Widget的build方法，Element中通过_widget来保存build方法返回的引用。</p><ul><li>调用build的形式分成两种情况： <ul><li>StatelessWidget：_widget = Widget.build(BuildContext context)</li><li>StatefullWidget：__widget = _state.build(BuildContext context), 因为StatefullWidget的布局都在State中。</li><li>BuildContext解释：BuildContext本质就是当前的Element对象，传递context对象的根本原因是因为：当Widget重新build的时候来确定Element的位置以及数据信息。</li></ul></li></ul></li><li><p>如果Element是一个RenderElement，调用createRenderObject方法创建对象并通过_renderObject引用保存。</p><ul><li>_renderObject = createRenderObject()</li></ul></li><li><p>如果Element是一个StatefullElement，调用createState来创建一个State对象，并通过_state对象来保存引用。</p><ul><li>_state = createState();</li><li>_state.widget = _widget; 这一步刚好就是：为什么我们能够在State中能通过this.widget去访问父Widget的数据的根本原因。</li></ul></li></ul></li></ol><h3 id="flutter中自定义view的流程" tabindex="-1"><a class="header-anchor" href="#flutter中自定义view的流程" aria-hidden="true">#</a> Flutter中自定义View的流程？</h3><ol><li>已有控件（widget）的继承，组合。</li><li>自定义绘制widget,也就是利用paint，cavans等进行绘制自定义视图。</li></ol><h3 id="聊聊flutter国际化解决方案" tabindex="-1"><a class="header-anchor" href="#聊聊flutter国际化解决方案" aria-hidden="true">#</a> 聊聊Flutter国际化解决方案？</h3><ol><li><p>Flutter给我们提供的Widget默认情况下就是支持国际化，但是在没有进行特别的设置之前，它们无论在什么环境都是以英文的方式显示的。如果想要添加其他语言就需要添加：lutter_localizations依赖。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flutter_localizations:
  sdk: flutter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>实现国际化方式有两种，手动配置和借助插件配置(基于手动配置做了简化)，下面先介绍手动配置：</p><ul><li><p>在MaterialApp中配置国际化信息，supportedLocales和localizationsDelegates需要同时指定。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">MaterialApp</span><span class="token punctuation">(</span>
    <span class="token comment">/// 支持的语种[支持的语言环境]</span>
    supportedLocales<span class="token punctuation">:</span> <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token class-name">Locale</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;en&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;US&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;zh&#39;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&#39;CN&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>

    <span class="token comment">/// 为多种语言提供本地化数据[本地化委托]</span>
    localizationsDelegates<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token class-name">GlobalMaterialLocalizations</span><span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>
        <span class="token class-name">GlobalWidgetsLocalizations</span><span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>
        <span class="token class-name">GlobalCupertinoLocalizations</span><span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    home<span class="token punctuation">:</span> <span class="token class-name">HomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定义国际化数据资源（新增的数据，需要手动添加getter方法，后期维护也很困难，所以下面会介绍通过插件自动生成来解决这个痛点）。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">AppLocalizations</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">;</span>

    <span class="token class-name">AppLocalizations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>locale<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> localizations <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string-literal"><span class="token string">&quot;en&quot;</span></span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;appTitle&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;hello world~&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;btnText&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;show current time&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string-literal"><span class="token string">&quot;zh&quot;</span></span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;appTitle&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;你好 世界~&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;btnText&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;展示当前时间&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token operator">?</span> <span class="token keyword">get</span> appTitle <span class="token operator">=</span><span class="token operator">&gt;</span> localizations<span class="token punctuation">[</span>locale<span class="token punctuation">.</span>languageCode<span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;appTitle&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token operator">?</span> <span class="token keyword">get</span> btnText <span class="token operator">=</span><span class="token operator">&gt;</span> localizations<span class="token punctuation">[</span>locale<span class="token punctuation">.</span>languageCode<span class="token punctuation">]</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;btnText&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>自定义Delegate提供数据，别忘了在MaterialApp的localizationsDelegates中进行配置。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/foundation.dart&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;package:flutter/material.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">AppLocalizationsDelegate</span> <span class="token keyword">extends</span> <span class="token class-name">LocalizationsDelegate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppLocalizations</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">AppLocalizationsDelegate</span> delegate <span class="token operator">=</span> <span class="token class-name">AppLocalizationsDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token class-name">AppLocalizations</span><span class="token operator">?</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Localizations</span><span class="token punctuation">.</span>of<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppLocalizations</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">AppLocalizations</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// 是否支持该语种</span>
    <span class="token metadata function">@override</span>
    bool <span class="token function">isSupported</span><span class="token punctuation">(</span><span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;en&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;zh&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>locale<span class="token punctuation">.</span>languageCode<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// Widget进行重新构建时，是否需要重新加载语种资源</span>
    <span class="token metadata function">@override</span>
    bool <span class="token function">shouldReload</span><span class="token punctuation">(</span><span class="token keyword">covariant</span> <span class="token class-name">LocalizationsDelegate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppLocalizations</span><span class="token punctuation">&gt;</span></span> old<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token comment">/// 重新加载语种资源（可以是读取本地json文件，也可以加载网络资源）</span>
    <span class="token metadata function">@override</span>
    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AppLocalizations</span><span class="token punctuation">&gt;</span></span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">SynchronousFuture</span><span class="token punctuation">(</span><span class="token class-name">AppLocalizations</span><span class="token punctuation">(</span>locale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>localizationsDelegates<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token comment">/// ...</span>
    <span class="token comment">/// 自定义的delegate</span>
    <span class="token class-name">AppLocalizationsDelegate</span><span class="token punctuation">.</span>delegate
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用定义的语种资源，此时APP就会根据系统语言类型来选择合适的语种数据进行展示。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">AppBar</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token class-name">AppLocalizationsDelegate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>appTitle<span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token class-name">AppLocalizationsDelegate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>btnText<span class="token operator">!</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>借助插件配置（Flutter Intl）</p><ul><li><p>先安装插件，需要重启IDEA。</p></li><li><p>选择：Tools -&gt; Flutter Intl -&gt; Initialize for the Project，稍等一会就在lib目录下会自动生成两个文件夹generated和i10n。</p><ul><li><p>注意，默认情况下会自动在pubspec.yml文件添加一下配置（如果没有，则自行添加）。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">flutter_intl</span><span class="token punctuation">:</span>
  <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>generated：里面的文件主要是来辅助生成delegate和支持的语言环境。</p></li><li><p>i10n：里面的文件主要是提供本地化数据资源。</p><ul><li><p>在intl_en.arb添加数据（en标识英文）</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;@@locale&quot;</span><span class="token operator">:</span> <span class="token string">&quot;en&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;appTitle&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hello world~&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;btnText&quot;</span><span class="token operator">:</span> <span class="token string">&quot;show current time&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>添加中文支持，Tools -&gt; Flutter Intl -&gt; add local，输入zh，回车就会在i10n目录下生成intl_zh.arb文件。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;@@locale&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zh&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;appTitle&quot;</span><span class="token operator">:</span> <span class="token string">&quot;你好 世界~&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;btnText&quot;</span><span class="token operator">:</span> <span class="token string">&quot;展示当前时间&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>在MaterialApp的localizationsDelegates中进行配置</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>localizationsDelegates<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token class-name">S</span><span class="token punctuation">.</span>delegate<span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用定义的语种资源（getter插件会帮助我们自动生成）</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">AppBar</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>appTitle<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token class-name">S</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>btnText<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="mvc、mvp、mvvm的优缺点" tabindex="-1"><a class="header-anchor" href="#mvc、mvp、mvvm的优缺点" aria-hidden="true">#</a> MVC、MVP、MVVM的优缺点？</h3><ol><li><p>不管是MVC、MVP还是MVVM他们要做的都只有一个目的那就是将业务代码和视图代码进行分离。</p></li><li><p>MVC，在 MVC 中，对应用程序划分出了三种角色：Model、View、Controller。三者有各自的具体用途和职责。</p><ul><li>MVC的三层介绍 <ul><li>Model：数据 + 业务逻辑。</li><li>View：接收和展示数据的界面。</li><li>Controller：主要担任 Model 与 View 之间的桥梁，用于控制程序的流程。</li></ul></li><li>MVC的优缺点 <ul><li>优点：MVC 为业务和视图的实现分离提供了开创性的设计思路，让负责业务逻辑的 Model 与负责展示的 View 实现了解耦，从而 Model 的复用性高。</li><li>缺点：三层会直接或者间接通信，各层职责划分不明确，C层承担了很大一部分职责，后期不利于维护。</li></ul></li></ul></li><li><p>MVP，MVP中包含的三种角色：Model、View、Presenter，它们都是通过接口进行交互的，Presenter 其实就是MVC中的 Controller，只是为了与 MVC 区别开来，所以才称为 Presenter，主要是目的还是MVP对MVC进行了分解，重新架构。</p><ul><li>MVC的三层介绍 <ul><li>Model：主要负责数据提供</li><li>View：其实还是和MVC中的View层一样的。</li><li>Presenter ：主要负责业务逻辑处理，作为M和V层的通信桥梁。</li></ul></li><li>MVP的优缺点 <ul><li>优点： <ul><li>MVP 之间的交互通过接口来进行的，便于进行单元测试，维护性和扩展性也提高了。</li><li>M 和 V 之间彻底分离了，降低了耦合性，修改 V 层也不会影响 M 层（不再是MVC中MV直接通信）。</li></ul></li><li>缺点： <ul><li>由于增加了很多接口的定义，需要编写的代码量暴增，增加了项目的复杂度。</li><li>需要对很多业务模块之间的交互抽象成接口定义，对开发人员的设计能力要求更高了。</li></ul></li></ul></li></ul></li><li><p>MVVM：Model + View + ViewModel，和MVC、MVP不同的是ViewModel。</p><ul><li>MVVM的三层介绍 <ul><li>Model： 封装了业务逻辑和数据，管理的是业务模型。</li><li>VM：（ViewModel）即视图模型，MVVM 最重要的一个特性就是数据绑定，通过将 View 的属性绑定到 ViewModel，可以使两者之间松耦合，当 ViewModel 的数据发生改变之后，与之绑定的 View 也会随之自动更新。反过来，当 View 发生了变化如果使用的单向绑定（ViewModel 数据不会自动更新），如果使用的双向绑定（ViewModel 数据会自动更新）。</li><li>View：视图层。</li></ul></li></ul></li><li><p>简单总结MVP和MVVP区别：</p><ul><li>MVP 和 MVVM 都是为了解决界面和数据的分离问题，两者只是采用了不同的实现方案。</li><li>MVP 之间的交互主要是通过接口实现的，其主要弊端就是需要编写大量接口。</li><li>而 MVVM 则是通过数据绑定的方式实现交互，虽然其实现需要依赖具体的一些框架工具，但明显大大减少了开发者需要编写的代码量。</li></ul></li></ol><h3 id="application、module、plugin、package区别" tabindex="-1"><a class="header-anchor" href="#application、module、plugin、package区别" aria-hidden="true">#</a> Application、Module、Plugin、Package区别？</h3><ol><li>Application：主体是Flutter，其中包含iOS、Android、web等项目。</li><li>Module：主要用于原生ios和android嵌入Flutter项目，用于原生和Flutter混合开发。</li><li>Plugin：在Flutter中实现不了的功能，可以通过Plugin方式调用原生能力来实现。</li><li>Package：纯Dart语言编写的模块，不需要原生代码实现，没有Android iOS目录。</li></ol><h3 id="如何区分是一个android还是flutter应用" tabindex="-1"><a class="header-anchor" href="#如何区分是一个android还是flutter应用" aria-hidden="true">#</a> 如何区分是一个Android还是Flutter应用？</h3><ol><li>目前Android 平台的应用通过开启开发者模式里的：开发者选项 -&gt; 显示布局边界 分辨出来。</li><li>原生应用的每个控件都会用边框分割出来，而 Flutter 的应用页面无边界分割，是个整体的SurfaceView。</li></ol><h3 id="flutter如何监听某个组件已经渲染完毕" tabindex="-1"><a class="header-anchor" href="#flutter如何监听某个组件已经渲染完毕" aria-hidden="true">#</a> Flutter如何监听某个组件已经渲染完毕？</h3><ol><li><p>监听某个组件是否已经渲染完成，使用 WidgetsBinding ，方法是在 initstate 或者 build 中注册回调。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">WidgetsBinding</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">addPostFrameCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;render complete&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="聊聊fluter的布局约束概念" tabindex="-1"><a class="header-anchor" href="#聊聊fluter的布局约束概念" aria-hidden="true">#</a> 聊聊Fluter的布局约束概念？</h3><ol><li>在Flutter中布局采用：向下传递约束，向上传递尺寸的方式。 <ul><li>向下传递约束：由FrameWork层将当前设备宽高信息作为约束传递给RootWidget，紧接着RootWidget会将当当前计算约束布局（满足上级约束就传递自身约束，不满足的就传递上级约束）传到下一个Widget，依次类推。</li><li>向上传递尺寸：子Widget会依次向上传递自己经过布局约束后计算出来的宽高，来确定最终Widget摆放位置。</li></ul></li><li>松约束和紧约束区别： <ul><li>松约束：最小约束等于0。</li><li>紧约束：最大约束和最小约束相等。</li></ul></li><li>uounded和unuounded区别： <ul><li>bounded：最大约不是infinity。</li><li>unbounded：最大约束是infinity，例如：ListeView，SingleChildSrcollView。</li></ul></li></ol><h3 id="column和stack中约束分配规则" tabindex="-1"><a class="header-anchor" href="#column和stack中约束分配规则" aria-hidden="true">#</a> Column和Stack中约束分配规则</h3><ol><li><p>Column中约束分配规则</p><ul><li>Column中一般会出现两种Widget，分别是：弹性Widget（父组件是Flexible或者Expanded）和非弹性Widget（Text、Container、SizedBox等等）。</li><li>Column受父Widget的布局约束，此时Column会将当前的布局约束优先传递给非弹性Widget，紧接着非弹性Widget会将自身的高度汇报给Column，然后由Column根据弹性Widget的Flex属性进行高度分配，最终Column会上报自身所占的尺寸。</li></ul></li><li><p>Stack约束分配规则</p><ul><li>Stack中一般会出现两种Widget，分别是：有位置的Widget（父组件是Positioned）无位置的Widget（Text、Container、SizedBox等等）。</li><li>Stack约束分配分情况 <ul><li>仅存在有位置的Widget：那么Stack的约束布局会尽可能往大了占，因为只有尽可能大Positioned才有意义。</li><li>仅存在无位置的Widget：那么Stack的约束布局会根据无位置的Widget中最大的Widget来确定。</li><li>混合存在：混合存在和仅存在无位置的Widget类似，Stack的约束布局会根据无位置的Widget中最大的Widget来确定。</li></ul></li><li>Stack的fit属性 <ul><li>Stack.loose：允许子Widget尽可能小（0 - Stack上限）。</li><li>Stack.expend：允许子Widget尽可能大。</li><li>Stack.passthrough:直接把上级布局约束传递下去。</li></ul></li></ul></li><li><p>通过CustomMultiChildLayout实现自定义布局</p></li></ol><h3 id="flutter-如何实现复制到剪贴板" tabindex="-1"><a class="header-anchor" href="#flutter-如何实现复制到剪贴板" aria-hidden="true">#</a> Flutter 如何实现复制到剪贴板？</h3><ol><li><p>直接调用API即可</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">setClipData</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Clipboard</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token class-name">ClipboardData</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="flutter中的key-有什么用" tabindex="-1"><a class="header-anchor" href="#flutter中的key-有什么用" aria-hidden="true">#</a> <strong>Flutter</strong>中的<strong>key?</strong> 有什么用？</h3><ol><li><p>在Flutter中key是一个抽象类，有两个直接子类：</p><ul><li>LocalKey ：主要是用于比较新旧Widget是否要更新、新增、删除，这个比较的过程采用了一个算法叫做Diff算法。</li><li>GlobalKey：主要保存Widget、State或者是Element的引用，可以用于访问他们内部的信息或者调用内部的方法。</li></ul></li></ol><h3 id="localkey-是什么-有什么作用" tabindex="-1"><a class="header-anchor" href="#localkey-是什么-有什么作用" aria-hidden="true">#</a> LocalKey 是什么，有什么作用？</h3><ol><li><p>LocalKey主要是用于比较新旧Widget是否要更新或者删除，其实LocalKey 存在的其中一个就是为了服务Diff算法，LocalKey也是Diff算法的核心所在。</p></li><li><p>LocalKe中又分成三个常用的Key</p><ul><li><p>ValueKey</p><ul><li>介绍：可以传入泛型作为Key的类型，一般情况传入例如：字符串、数字等等类型的key。</li><li>新旧ValueKey比较规则：内部维护了泛型类型的value属性，并实现了==和hashCode方法。只要两个ValueKey的value属性相等，那么就认为两个Key相等（相当于java的equals方法）。</li></ul></li><li><p>ObjectKey：</p><ul><li>内部采用Object类型来保存传入的Key，也就是我们可以将一个Object类型的值作为Key。</li><li>新旧ObjectKey比较规则：ObjectKey根据indentical方法（判断两个引用是否指向同一个对象）来判断两个ObjectKey是否相等的。</li></ul></li><li><p>UniqueKey：生成一个唯一的KEey，本质通过hash生成的，使用UniqueKe需要注意：UniqueKey如果不提前保存会导致State状态丢失。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token metadata function">@override</span>
<span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&#39;[#</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression"><span class="token function">shortHash</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">]&#39;</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>比较两个Widget时会调用canUpdate(oldWidget, newWidget)方法通过新旧Widget的runtimeType和key这两个属性来进行比较。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">static</span> bool <span class="token function">canUpdate</span><span class="token punctuation">(</span><span class="token class-name">Widget</span> oldWidget<span class="token punctuation">,</span> <span class="token class-name">Widget</span> newWidget<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> oldWidget<span class="token punctuation">.</span>runtimeType <span class="token operator">==</span> newWidget<span class="token punctuation">.</span>runtimeType <span class="token operator">&amp;&amp;</span> oldWidget<span class="token punctuation">.</span>key <span class="token operator">==</span> newWidget<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="globalkey是什么-有什么作用" tabindex="-1"><a class="header-anchor" href="#globalkey是什么-有什么作用" aria-hidden="true">#</a> GlobalKey是什么，有什么作用？</h3><ol><li><p>GlobalKey使用了一个静态常量Map来保存对应的Element，你可以通过GlobalKey找到持有该GlobalKey的 Widget，State 和 Element。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GlobalKey</span><span class="token punctuation">,</span> <span class="token class-name">Element</span><span class="token punctuation">&gt;</span></span> _globalKeyRegistry <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GlobalKey</span><span class="token punctuation">,</span> <span class="token class-name">Element</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 通过GlobalKey获取Context对象
BuildContext? get currentContext =&gt; _currentElement;

// 通过GlobalKey获取Widget对象
Widget? get currentWidget =&gt; _currentElement?.widget;

// 通过GlobalKey获取State对象
T? get currentState {
    final Element? element = _currentElement;
    if (element is StatefulElement) {
    final StatefulElement statefulElement = element;
    final State state = statefulElement.state;
    if (state is T)
    	return state;
    }
    	return null;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过GlobalKey可以用于访问引用内部的信息或者调用内部的方法。</p></li><li><p>需求：需要在外部Widget中改变内部Widget的状态，有两种办法解决：</p><ul><li><p>通过回调函数的方式。</p></li><li><p>通过GlobalKey，GlobalKey 能够跨 Widget 访问状态。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 外部Widget先定义一个GlobalKey</span>
<span class="token keyword">final</span> <span class="token class-name">GlobalKey</span><span class="token generics"><span class="token punctuation">&lt;</span>_SwitchWidgetState<span class="token punctuation">&gt;</span></span> switchWidgetKey <span class="token operator">=</span> <span class="token class-name">GlobalKey</span><span class="token generics"><span class="token punctuation">&lt;</span>_SwitchWidgetState<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用内部Widget并将key作为参数传递</span>
body<span class="token punctuation">:</span> <span class="token class-name">SwitchWidget</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> switchWidgetKey<span class="token punctuation">)</span>
    
<span class="token comment">// 当外部Widget按钮被点击时此时需要取更改内部Widget的状态</span>
switchWidgetKey<span class="token punctuation">.</span>currentState<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">changeSwitchState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 在内部Widet中仅仅需要写好代码逻辑 提供给外部调用即可</span>
<span class="token keyword">void</span> <span class="token function">changeSwitchState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    isCheck <span class="token operator">=</span> <span class="token operator">!</span>isCheck<span class="token punctuation">;</span>
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="main函数和runapp的作用以及关系" tabindex="-1"><a class="header-anchor" href="#main函数和runapp的作用以及关系" aria-hidden="true">#</a> main函数和runApp的作用以及关系？</h3><ol><li><p>main函数是整个应用程序的入口函数。</p></li><li><p>runApp函数是渲染根widget树的函数。</p></li><li><p>runApp函数都会在main函数中运行。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token class-name">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">StatelessWidget</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="谈谈你对widget的理解以及分类" tabindex="-1"><a class="header-anchor" href="#谈谈你对widget的理解以及分类" aria-hidden="true">#</a> 谈谈你对Widget的理解以及分类？</h3><ol><li>Widget被译为 <code>小部件</code>，在Flutter中Widget其实就是一些界面上展示的UI组件。</li><li>Widget可以分为两类 <ul><li>statelessWidget（无状态Widget）不会自己重新构建自己。一般使用场景做一个简单的静态展示页面，不涉及数据操作。</li><li>statefulWidget（有状态Widget），有状态意味着在Widget内部可能有需要动态改变的数据，改变数据可能会（如果调用<code>setState(() {})</code>）涉及到UI更新，此时statefulWidget就会自己重新构建自己。</li></ul></li></ol><h3 id="customscrollerview和nestedscroller区别" tabindex="-1"><a class="header-anchor" href="#customscrollerview和nestedscroller区别" aria-hidden="true">#</a> CustomScrollerView和NestedScroller区别？</h3><ul><li>CustomScrollerView是一个基于滚动的且可定制的Widget，定制布局时需要通过一系列的Sliver对象进行组合，常见的Sliver对象有：SliverAppBar、SliverList、SliverGrid、SliverPersistentHeader、SliverToBoxAdapter、SliverFillRemaining等等等。、</li><li>NestedScroller可以将一个特殊的Scrollable 对象放入到另一个对象中（在大多数情况下，方向不同）。</li><li>SingleChildScrollView和 NestedScrollView 都建立在CustomScrollerView之上。</li></ul><h3 id="简单聊聊listview的几种构建方式" tabindex="-1"><a class="header-anchor" href="#简单聊聊listview的几种构建方式" aria-hidden="true">#</a> 简单聊聊ListView的几种构建方式？</h3><ul><li><p>ListView构造器</p><ul><li>直接传入一个Widget数组，用于展示固定数量的子Widget。</li></ul></li><li><p>ListView.builder</p><ul><li><p>通过传入IndexedWidgetBuilder（ctx，index）对象实现布局构建，可以实现动态布局效果，实现定制化更轻松，通过itemCount属性来指定子Widget的数量，如果不指定则无限。</p></li><li><p>此外ListView.builder还能够起到懒加载的效果，默认情况下只展示视窗内的子Widget(会向下偏移一端距离，这段距离的Widget也会被构建出来)。上滑时，顶部移除的Widget就不再展示了直接从内存移除，而下面的Widget也是按照懒加载的方式进行构建（缓存前3条，预加载后3条）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 默认20条数据
// 视窗只能展示8条， 默认会向下偏移展示3条   第一次就只构建前11(8 + 3)条
// 上拉时，第5条被推到顶部，界面就只展示 5 - 12条， 向前偏移3条，第1条记录就会被移除， 同理第 12 - 16条数据就会被构建
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>ListView.separated</p><ul><li>可以通过传入一个IndexedWidgetBuilder对象为每一项Widget指定一个自定义的Widget（下划线），剩下的用法和ListView.builder一样。</li></ul></li><li><p>ListView.custom</p><ul><li>其实builder + separated方式都是custom方式的“快捷方式”。因为 ListView*内部是靠这个 SliverChildDelegate属性动态初始化子元素的。</li><li>我们使用builder和separated比较多，这个custom相对来说就比较少了。</li></ul></li></ul><h3 id="有用过futurebuilder吗-简单聊聊" tabindex="-1"><a class="header-anchor" href="#有用过futurebuilder吗-简单聊聊" aria-hidden="true">#</a> 有用过FutureBuilder吗？简单聊聊？</h3><ol><li><p>在不使用StatefullWidget情况下，通过FutureBuilder可以实现异步刷新UI的功能。</p></li><li><p>FutureBuilder有两个重要参数：future和builder。</p><ul><li><p>future：用于处理异步任务（读取文件/复杂计算过程/请求网络数据），结果返回一个future对象。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>future<span class="token punctuation">:</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span><span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;ok&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>builder：当future的状态发生改变时builder就会被回调，结果返回一个Widget。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// snapshot当前Future的快照信息</span>
builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AsyncSnapshot</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/// snapshot.connectionState可以获取当前Future的状态（none、waiting、active、done）</span>
    <span class="token comment">/// none：当future为null时</span>
    <span class="token comment">/// waiting：future状态处于pedding时</span>
    <span class="token comment">/// active：用于监听stream流，仅当</span>
    <span class="token comment">/// done：future状态处于complected时</span>

    <span class="token comment">/// snapshot.hasError future中是否有错误， snapshot.error 获取错误信息</span>
    <span class="token comment">/// snapshot.hasData future中是否有数据， snapshot.data 获取数据</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>FutureBuilder还可以传入一个默认值，通过initialData属性。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> <span class="token class-name">T</span><span class="token operator">?</span> initialData<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>看一个实例</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">FutureBuilder</span><span class="token punctuation">(</span>
    future<span class="token punctuation">:</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;success&quot;</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token string-literal"><span class="token string">&quot;error&quot;</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    builder<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">BuildContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AsyncSnapshot</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">&gt;</span></span> snapshot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>connectionState <span class="token operator">==</span> <span class="token class-name">ConnectionState</span><span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
                    mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
                    children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>error<span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">snapshot<span class="token punctuation">.</span>error</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token class-name">Column</span><span class="token punctuation">(</span>
                mainAxisAlignment<span class="token punctuation">:</span> <span class="token class-name">MainAxisAlignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
                children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Icon</span><span class="token punctuation">(</span><span class="token class-name">Icons</span><span class="token punctuation">.</span>done<span class="token punctuation">,</span> size<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span> color<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">SizedBox</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">snapshot<span class="token punctuation">.</span>data</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">CircularProgressIndicator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="有用过streambuilder吗-简单聊聊" tabindex="-1"><a class="header-anchor" href="#有用过streambuilder吗-简单聊聊" aria-hidden="true">#</a> 有用过StreamBuilder吗？简单聊聊？</h3><ol><li><p>使用StreamBuilder和使用FutureBuilder用法很相似，都传入一个future和builder，同时也可以传入默认值，仅仅需要注意的是：获取future的数据时（不管是失败还是成功），都需要在 active 时获取，因为StreamBuilder监听的是Stream，Stream不像是Future只有一个结果，Stream是可能有多个结果的，显然在done（Stream被关闭）的状态下获取数据肯定是不合适的。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>connectionState <span class="token operator">==</span> <span class="token class-name">ConnectionState</span><span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>snapshot<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">snapshot<span class="token punctuation">.</span>error</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">return</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">snapshot<span class="token punctuation">.</span>data</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建流的方式</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// 创建 间隔重复发出事件的流</span>
<span class="token keyword">final</span> <span class="token class-name">Stream</span> _stream1 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">periodic</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    int randomValue <span class="token operator">=</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>randomValue <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">randomValue</span></span><span class="token string"> &gt; 50, success&quot;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">randomValue</span></span><span class="token string"> &lt; 50, error&quot;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token comment">/// 创建单个流， 此流发出 [value] 的单个数据事件，然后以 done 事件完成。</span>
<span class="token keyword">final</span> <span class="token class-name">Stream</span> _stream2 <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ok&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token comment">/// 创建普通流控制器，允许在流上发送数据、错误和完成事件，也可以被其他人所监听获取当前流的状态信息</span>
<span class="token keyword">final</span> <span class="token class-name">StreamController</span> _streamController <span class="token operator">=</span> <span class="token class-name">StreamController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/// 添加数据</span>
_streamController<span class="token punctuation">.</span>sink<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ok&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/// 添加异常信息</span>
_streamController<span class="token punctuation">.</span>sink<span class="token punctuation">.</span><span class="token function">addError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;error&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/// 添加流</span>
_streamController<span class="token punctuation">.</span>sink<span class="token punctuation">.</span><span class="token function">addStream</span><span class="token punctuation">(</span><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/// 监听流</span>
_streamController<span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;listener  Stream </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">event</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token comment">/// 创建广播流类型的控制器（和普通流控制器用法相似，下面说区别）</span>
<span class="token keyword">final</span> <span class="token class-name">StreamController</span> _streamController <span class="token operator">=</span> <span class="token class-name">StreamController</span><span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>广播流和普通流的区别</p><ul><li><p>普通的Stream只能被一个listener或者StreamBuilder监听，广播流可以被多个listener或者StreamBuilder监听。</p></li><li><p>普通的Stream会有数据缓存，广播流没有缓存数据。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span>zero<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _simpleStream<span class="token punctuation">.</span>sink<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        _broadcastController<span class="token punctuation">.</span>sink<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    _simpleStream<span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;_simpleStream listener </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">event</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    _broadcastController<span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;_broadcastController listener </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">event</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="flutter动画有那些常用的类或者api" tabindex="-1"><a class="header-anchor" href="#flutter动画有那些常用的类或者api" aria-hidden="true">#</a> Flutter动画有那些常用的类或者API？</h3><ol><li><p>常用的类和相关API</p><ul><li><p>Animation抽象类，动画基类。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>AnimationController动画控制器类（重点），可以控制动画执行方向或者获取动画执状态，监听动画等等。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">AnimationController</span> <span class="token keyword">extends</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">AnimationController</span> _animationController <span class="token operator">=</span>  <span class="token class-name">AnimationController</span><span class="token punctuation">(</span>
    <span class="token comment">/// vsync信号同步量， 收不到vsync时动画会停止运行(App处于后台/当前Page不可见情况)</span>
    vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
    <span class="token comment">/// 动画执行时间</span>
    duration<span class="token punctuation">:</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">/// 动画开始执行时的值（默认0.0）</span>
    lowerBound<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>
    <span class="token comment">/// 动画执行结束时的值（默认1.0）</span>
    upperBound<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// 向前后执行动画（正向）</span>
_animationController<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// 向前执行动画（反向）</span>
_animationController<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// 重置动画(将控制器的值设置为lowerBound，停止动画（如果正在进行），并重置为其起点或关闭状态)</span>
_animationController<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// 将动画从当前值驱动到目标</span>
_animationController<span class="token punctuation">.</span><span class="token function">animateTo</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// 监听动画值的改变</span>
_animationController<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// 监听动画值的改变</span>
_animationController<span class="token punctuation">.</span><span class="token function">addStatusListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AnimationStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/// status 动画的状态，AnimationStatus是一个枚举有四个枚举值(dismissed、forward、reverse、completed)</span>
    <span class="token comment">/// dismissed: animation is stopped at the beginning(未开始)</span>
    <span class="token comment">/// forward: animation is running from beginning to end（向后执行）</span>
    <span class="token comment">/// reverse: animation is running backwards, from end to beginning（向前执行）</span>
    <span class="token comment">/// completed: The animation is stopped at the end（执行结束）</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>CurvedAnimation类，指定动画执行的方式（线性、先快后慢、先慢后快等等...）。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">CurvedAnimation</span> <span class="token keyword">extends</span> <span class="token class-name">Animation</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Tween类，指定动画执行的值范围（AnimationController默认是0.0-1.0）。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Tween</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Animatable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>AnimatedBuilder 和 AnimatedWidget</p><ul><li>在不使用AnimatedBuilder 和 AnimatedWidget情况下，想要刷新UI需要通过setState，setState会让build方法重新运行，大多数场景下，我们仅仅希望需要做动画展示的Widget被build而不要让其他的Widget也被build。</li><li>这时AnimatedBuilder 和 AnimatedWidget也就是来解决这个问题的，实际开发者AnimatedBuilder （用的多）比AnimatedWidget使用更方便。</li></ul></li><li><p>交织动画，实现也很简单，多创建几个Tween即可，一个Tween对应一个动画的应用场景。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>_animationController <span class="token operator">=</span> <span class="token class-name">AnimationController</span><span class="token punctuation">(</span>vsync<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
_animation <span class="token operator">=</span> <span class="token class-name">CurvedAnimation</span><span class="token punctuation">(</span>parent<span class="token punctuation">:</span> _animationController<span class="token punctuation">,</span> curve<span class="token punctuation">:</span> <span class="token class-name">Curves</span><span class="token punctuation">.</span>linear<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// 颜色变化</span>
_colorAnimation <span class="token operator">=</span> <span class="token class-name">ColorTween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token class-name">Colors</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>_animationController<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// 大小变化</span>
_sizeAnimation <span class="token operator">=</span> <span class="token class-name">Tween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token number">150.0</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>_animationController<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// 位置变化</span>
_positionAnimation <span class="token operator">=</span> <span class="token class-name">Tween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token number">45.0</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>_animationController<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// 透明的变化</span>
_opacityAnimation <span class="token operator">=</span> <span class="token class-name">Tween</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>_animationController<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">AnimatedBuilder</span><span class="token punctuation">(</span>
    animation<span class="token punctuation">:</span> _animationController<span class="token punctuation">,</span>
    builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Transform</span><span class="token punctuation">(</span>
            alignment<span class="token punctuation">:</span> <span class="token class-name">Alignment</span><span class="token punctuation">.</span>center<span class="token punctuation">,</span>
            transform<span class="token punctuation">:</span> <span class="token class-name">Matrix4</span><span class="token punctuation">.</span><span class="token function">rotationZ</span><span class="token punctuation">(</span>_positionAnimation<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> <span class="token class-name">Opacity</span><span class="token punctuation">(</span>
                opacity<span class="token punctuation">:</span> _opacityAnimation<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
                child<span class="token punctuation">:</span> <span class="token class-name">Container</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> _sizeAnimation<span class="token punctuation">.</span>value<span class="token punctuation">,</span> height<span class="token punctuation">:</span> _sizeAnimation<span class="token punctuation">.</span>value<span class="token punctuation">,</span> color<span class="token punctuation">:</span> _colorAnimation<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Hero动画，在两个Widget（Page）进行切换时，对位置、外观上的差异变化进行动画、过渡描述。</p><ul><li>需要注意：两边的Widget都需要绑定相同的TAG（除此之外需要保证TAG地唯一性）。</li></ul></li></ol><h3 id="widget的生命周期是怎么样" tabindex="-1"><a class="header-anchor" href="#widget的生命周期是怎么样" aria-hidden="true">#</a> Widget的生命周期是怎么样？</h3><ol><li><p>statelessWidget的生命周期，因为是无状态Widget且不会自己重新构建自己。生命周期比较简单。</p><ul><li><p>Widget的构造方法。</p></li><li><p>Widget的build方法。</p></li></ul></li><li><p>statefulWidget的生命周期</p><ul><li><p>Widget的构造方法。</p></li><li><p>Widget的createSatet方法。</p></li><li><p>State的构造方法。</p></li><li><p>state的initState方法，当Widget第一次插入到Widget树时会被调用（注意：重写该方法时，必须要先调用super. initState()）。</p></li><li><p>State的didChangeDependencies方法，该方法被调用后，组件的状态变为 dirty，并且立即调用 build 方法，该方法有两种调用时机：</p><ul><li>调用initState方法后，会调用该方法。</li><li>从其他widget中依赖一些数据发生改变时会调用该方法，比如用InheritedWidget，provider来监听数据的改变。</li></ul></li><li><p>State的build方法（调用完 didChangeDependencies方法后调用该方法 ， 调用 setState 方法之后 , 该方法也会被调用），build方法中应该只包含构建组件的代码，不应该包含其他额外的功能，尤其是耗时任务。</p></li><li><p>state的deactivate方法（当state被暂时从视图移除的时候会调用，页面push走、pop回来的时候都会调用）。</p></li><li><p>State的dispose方法（页面被销毁的时候调用）。</p></li></ul></li><li><p>生命周期画图</p><p><img src="`+l+`" alt="image-20230509095612742"></p></li><li><p>生命周期相关的一些注意点</p><ul><li><p>mounted对象，mounted 是 State 对象中的一个属性，此属性表示当前组件是否在树中。createState 函数执行完毕后表示当前组件已经在组件树中，属性 mounted 被 Framework 设置为 true，强烈建议：在调用 setState 时加上 mounted 判断。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">if</span><span class="token punctuation">(</span>mounted<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>dirty 和 clean</p><ul><li>dirty 表示组件当前的状态为 脏状态，绘制下一帧时将会执行 build 函数，调用 setState 方法或者执行didUpdateWidget 方法后，组件的状态为 dirty。</li><li>clean 表示组件当前的状态为干净状态，clean 状态下组件不会执行 build 函数。</li></ul></li></ul></li></ol><h3 id="flutter中监听android-activity的生命周期" tabindex="-1"><a class="header-anchor" href="#flutter中监听android-activity的生命周期" aria-hidden="true">#</a> Flutter中监听Android Activity的生命周期？</h3><ol><li><p>通过WidgetsBindingObserver的didChangeAppLifecycleState 可以获取App的生命周期状态。</p></li><li><p>在AppLifecycleState类中。常用状态包含如下几个：</p><ul><li><code>inactive</code> — 应用处于非活跃状态并且不接收用户输入。</li><li><code>detached</code> — 应用依然保留 flutter engine，但是全部宿主 view 均已脱离。</li><li><code>paused</code> — 应用当前对用户不可见，无法响应用户输入，并运行在后台。这个事件对应于 Android 中的 <code>onPause()</code>；</li><li><code>resumed</code> — 应用对用户可见并且可以响应用户的输入。这个事件对应于 Android 中的 <code>onPostResume()</code>；</li></ul></li><li><p>案例</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 需要混入WidgetsBindingObserver类</span>
<span class="token keyword">class</span> <span class="token class-name">HomeWidgetState</span> <span class="token keyword">extends</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HomeWidget</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">with</span> <span class="token class-name">WidgetsBindingObserver</span> <span class="token punctuation">{</span>
    <span class="token metadata function">@override</span>
    <span class="token keyword">void</span> <span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">initState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注册监听器，当生命周期发生变化时 FreamWork会回调didChangeAppLifecycleState方法，并传递当前状态</span>
        <span class="token class-name">WidgetsBinding</span><span class="token punctuation">.</span>instance<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//...</span>
    
    <span class="token metadata function">@override</span>
    <span class="token keyword">void</span> <span class="token function">didChangeAppLifecycleState</span><span class="token punctuation">(</span><span class="token class-name">AppLifecycleState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token class-name">AppLifecycleState</span><span class="token punctuation">.</span>resumed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;应用对用户可见并且可以响应用户的输入。这个事件对应于 Android 中的 \`onPostResume()\`；。&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token class-name">AppLifecycleState</span><span class="token punctuation">.</span>inactive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;应用处于非活跃状态并且不接收用户输入。&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token class-name">AppLifecycleState</span><span class="token punctuation">.</span>paused<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;应用当前对用户不可见，无法响应用户输入，并运行在后台。这个事件对应于 Android 中的 \`onPause()\`；&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token class-name">AppLifecycleState</span><span class="token punctuation">.</span>detached<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;应用依然保留 flutter engine，但是全部宿主 view 均已脱离。&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token metadata function">@override</span>
    <span class="token keyword">void</span> <span class="token function">deactivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">deactivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注意deactivate时 请移除监听</span>
        <span class="token class-name">WidgetsBinding</span><span class="token punctuation">.</span>instance<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="widget和widget树的概念" tabindex="-1"><a class="header-anchor" href="#widget和widget树的概念" aria-hidden="true">#</a> Widget和Widget树的概念？</h3><ol><li>Widget：在Flutter中几乎所有东西都是Widget，可以将Widget想象成一个可视化组件或者能与应用程序交互的组件。</li><li>Widget树：Widget以树结构进行组织。包含其他Widget的widget被称为父Widget(或widget容器)。包含在父widget中的widget被称为子Widget。</li></ol><h3 id="buildcontext-到底是什么东西" tabindex="-1"><a class="header-anchor" href="#buildcontext-到底是什么东西" aria-hidden="true">#</a> BuildContext 到底是什么东西？</h3><ol><li><p>BuildContext是什么？</p><ul><li><p>首先BuildContext是一个抽象类，从源码可以得到。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BuildContext</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>观察一下离BuildContext类最近的两行文档注释信息。</p><ul><li>[BuildContext] objects are actually [Element] objects：BuildContext对象实际上一个Element对象。</li><li>The [BuildContext] interface is used to discourage direct manipulation of [Element] objects：BuildContext接口用于阻止直接操作Element对象。</li></ul></li></ul></li><li><p>BuildContext 用来干什么？</p><ul><li><p>获取当前Widget对应的Element的信息，例如：Widget的大小，位置信息等等。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// 获取Element的大小</span>
<span class="token class-name">RenderBox</span><span class="token operator">?</span> renderBox <span class="token operator">=</span> <span class="token punctuation">(</span>ctx <span class="token operator">as</span> <span class="token class-name">Element</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findRenderObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">as</span> <span class="token class-name">RenderBox</span><span class="token operator">?</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>renderBox<span class="token operator">!</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/// 获取Element的位置</span>
<span class="token class-name">Offset</span> offset <span class="token operator">=</span> renderBox<span class="token punctuation">.</span><span class="token function">localToGlobal</span><span class="token punctuation">(</span><span class="token class-name">Offset</span><span class="token punctuation">.</span>zero<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>用来代替setState函数，不推荐！！因为官方不推荐直接操作Element对象。</p><ul><li><p>看过setState函数源码就会知道，setState内部最终做的就是：_element!.markNeedsBuild();</p><ul><li>markNeedsBuild()函数解释：将元素标记为脏元素，并将其添加到要在下一帧中重建的小部件的全局列表中。</li></ul></li><li><p>我们不是也可以通过Buildcontext去获取对应Element吗？拿到Element不也可以调用markNeedsBuildhans函数？是的，完全没问题，但是这种办法不推荐！！</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token punctuation">(</span>context <span class="token operator">as</span> <span class="token class-name">Element</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">markNeedsBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>实际开发中BuildContext的使用</p><ul><li><p>这些方法应该不陌生，开发中用得比较多。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Theme</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span>primaryColor<span class="token punctuation">;</span>
<span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Scaffold</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openDrawer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>每个方法都需要传一个Context对象的背后原理？</p><ul><li><p>先看关于Element身上的一些方法</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// 从当前Element位置往上找，直到找到特定类型的Element（State）才停下</span>
<span class="token punctuation">(</span>context <span class="token operator">as</span> <span class="token class-name">Element</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAncestorStateOfType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/// 从当前Element位置往上找，直到找到特定类型的Widget才停下，例如：InheritedWidget的应用</span>
<span class="token punctuation">(</span>context <span class="token operator">as</span> <span class="token class-name">Element</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dependOnInheritedWidgetOfExactType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>浅析一下Theme.of(context)和Navigator.of(context)源码</p><ul><li><p>Theme.of(context)，进入of方法中，观察最主要的一句</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// 从当前Element位置往上找，直到找到InheritedTheme类型就Widget就停下且返回找到的Widget</span>
<span class="token keyword">final</span> _InheritedTheme<span class="token operator">?</span> inheritedTheme <span class="token operator">=</span> context<span class="token punctuation">.</span>dependOnInheritedWidgetOfExactType<span class="token generics"><span class="token punctuation">&lt;</span>_InheritedTheme<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Navigator.of(context)，看最关键的一句话</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// 从当前Element位置往上找，直到找到NavigatorState类型就Element就停下且返回找到的Element（State）</span>
navigator <span class="token operator">=</span> navigator <span class="token operator">?</span><span class="token operator">?</span> context<span class="token punctuation">.</span>findAncestorStateOfType<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NavigatorState</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>用of方法，主要是为了简化调用。</p></li></ul></li></ul></li></ol><h3 id="buildcontext-、state概念" tabindex="-1"><a class="header-anchor" href="#buildcontext-、state概念" aria-hidden="true">#</a> BuildContext 、State概念？</h3><ol><li><p>BuildContext ：是已创建的Widget树中某个Widget位置引用（Element），一个context只从属于一个widget，它和widget一样是链接在一起的，并且会形成一个context树。</p></li><li><p>State：State定义了statefulWidget实例的行为，包含了用于干预/交互Widget信息的行为和布局，应用于State的任何更改都会强制重新构建Widget。</p></li></ol><h3 id="widget、element、renderobject-关系" tabindex="-1"><a class="header-anchor" href="#widget、element、renderobject-关系" aria-hidden="true">#</a> Widget、Element、RenderObject 关系？</h3><ol><li>创建widget的时候，一个widget对应一个element，但是widget和element与 RenderObject并不是一一对应，为什么？后面解答。</li><li>三者的概念理解 <ul><li>Widget：页面小部件，我们自己编写Widget，比如：Container、Text、Column、ListView等等...</li><li>Element： <ul><li>Element和Widget是一一对应的，Element中通过_widget来保存Widget引用，设计这个element主要的灵感主要是来自React框架的虚拟DOM和Diff算法（Flutter官网有说过）。</li><li>因为Widget是不稳定的，经常会进行Build 如果界面直接渲染我们写的Widget这势必对Flutter的性能有很高的要求，此时Element就排上用场了，Flutter会通过KEY（GlobalKey）来找到对应的Element并且调用canUpdate方法进行比较（主要是比较新旧widget的key和runtimeType属性），进行小范围的更新，而不是重新创建Element。</li></ul></li><li>RenderObject：最终被渲染到页面的视图，渲染视图步骤主要包含两步：布局(layout)和绘制(paint)。</li></ul></li><li>为什么但是widget和element与 RenderObject并不是一一对应？？ <ul><li>首选需要确定当前Widget是否是一个渲染的Widget（RenderObjectWidget），如何判断？看是不是RenderObjectWidget的子类或者看父类是否继承了XXXRenderObjectWidget。</li><li>举个例子： <ul><li>非RenderObjectWidget：Text、Container、Icon等等...</li><li>RenderObjectWidget -&gt; MultiChildRenderObjectWidget: Column、Stack、Flex等等...</li><li>RenderObjectWidget -&gt; SingleChildRenderObjectWidget：Align、SizedBox、Padding等等...</li></ul></li><li>结论就是：只有继承了RenderObjectWidget的Widget最后才会生成一个对应的RenderObject，那么非RenderObjectWidget的子类会通过插槽的方式被合并到其中。</li></ul></li></ol><h3 id="什么是状态管理-你了解那些状态管理框架" tabindex="-1"><a class="header-anchor" href="#什么是状态管理-你了解那些状态管理框架" aria-hidden="true">#</a> 什么是状态管理？你了解那些状态管理框架？</h3><ol><li>状态管理是声明式编程中一个重要的概念，Flutter也是声明式编程的，</li><li>Flutter采用现代响应式框架构建，其中心思想是使用组件来构建应用的UI，组件最重要的概念就是状态，状态是一个组件的UI数据模型，是组件渲染时的数据依据。</li><li>Flutter的状态管理可以分成两大类：应用状态（全局状态）和短时状态（局部状态）。</li><li>常用的状态管理框架有：InheritedWidget、Redux 、BLoC、Provider、Getx等等。</li></ol><h3 id="有用过inheritedwidget吗" tabindex="-1"><a class="header-anchor" href="#有用过inheritedwidget吗" aria-hidden="true">#</a> 有用过InheritedWidget吗？</h3><ol><li><p>我们在进行Flutter开发时，经常会遇到数据传递的问题。我们可能会逐级逐级一层一层传递，由于Widget 树的关系，Widget层级可以做得非常深，在这些层级间传递数据会让效率变得很低。也可能在某一层widget不需要这些数据，但是在下一层会使用的这些数据，造成了不需要数据的widget却也持有数据，显得冗余且不优雅。</p></li><li><p>Flutter提供了InheritedWidget这样一个功能型组件，它提供了一种在 widget 树中从上到下共享数据的方式，即在父widget 中通过InheritedWidget共享了一个数据，那么在任意子widget都能获取该共享的数据。</p></li><li><p>平时我们使用的MediaQuery.of(context)、Theme.of(context)，都是使用InheritedWidget来实现数据共享的。</p></li><li><p>InheritedWidget使用方式</p><ul><li><p>定义一个共享数据的MyInheritedWidget，该类需要继承自InheritedWidget。</p><ul><li><p>继承InheritedWidget类时，需要实现一个updateShouldNotify方法，该方法是比较新旧MyInheritedWidget的数据来判断是否需要更新相关依赖的Widget。</p></li><li><p>定义了一个of方法，该方法通过context开始去查找祖先的MyInheritedWidget。</p></li></ul></li><li><p>使用MyInheritedWidget，可以将MyInheritedWidget放在需要共享数据的共同父Widget上，此时就可以进行数据共享了。</p></li></ul></li></ol><h3 id="简单聊聊provider这个状态管理框架" tabindex="-1"><a class="header-anchor" href="#简单聊聊provider这个状态管理框架" aria-hidden="true">#</a> 简单聊聊Provider这个状态管理框架？</h3><ol><li><p>Flutter中状态管理框架事比较多的，其中Provider是官方推荐的一个状态管理框架，Provider主要还是做全局数据共享的，底层是通过封装InheritedWidget并且在此基础上做了一些优化。</p></li><li><p>使用Provider时一般我们会配合几个类一起使用</p><ul><li><p>ChangeNotifier：这个类可以监听到数据变化，只需要我们在数据变化时手动调用notifyListeners() 方法，ChangeNotifier就能够通知消费者进行数据更新。</p></li><li><p>XxxViewModel：充当MVVM中的MV角色，通过数据绑定的方式来驱动视图更新。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> countViewModel <span class="token keyword">extends</span> <span class="token class-name">ChangeNotifier</span> <span class="token punctuation">{</span>
    int _count<span class="token punctuation">;</span>

    <span class="token function">countViewModel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_count<span class="token punctuation">)</span><span class="token punctuation">;</span>

    int <span class="token keyword">get</span> count <span class="token operator">=</span><span class="token operator">&gt;</span> _count<span class="token punctuation">;</span>

    <span class="token keyword">set</span> <span class="token function">count</span><span class="token punctuation">(</span>int value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _count <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token comment">// 数据更新 通知消费者</span>
        <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Provider/MultiProvider：用在根Widget上，方便项目的子Widget能够共享到数据，唯一Provider和MultiProvider区别就是：Provider只能接收一个Provider，当然可以通过嵌套方式（层级太多很难受），MultiProvider就是来解决Provider的不足。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Provider</span><span class="token punctuation">(</span>
    create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">MyModel</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span>
    child<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Provider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Something</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
    create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    child<span class="token punctuation">:</span> <span class="token class-name">Provider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SomethingElse</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
        create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">SomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token class-name">Provider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnotherThing</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
            create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">AnotherThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            child<span class="token punctuation">:</span> someWidget<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">MultiProvider</span><span class="token punctuation">(</span>
    providers<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token class-name">Provider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Something</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Something</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Provider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SomethingElse</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">SomethingElse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Provider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AnotherThing</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>create<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">AnotherThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    child<span class="token punctuation">:</span> someWidget<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Probvider.of&lt;T&gt;()：从Provider中获取数据</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>final provider = Provider.of&lt;ProviderInterface&gt;(context);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Consumer/Consumer2/Consume3，同样的也是从Provider中获取数据</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// Consumer </span>
<span class="token class-name">Foo</span><span class="token punctuation">(</span>
    child<span class="token punctuation">:</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> a<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token class-name">Baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// Consumer2</span>
<span class="token class-name">Foo</span><span class="token punctuation">(</span>
    child<span class="token punctuation">:</span> <span class="token class-name">Consumer2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> aVM<span class="token punctuation">,</span> bVM<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> a<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token class-name">Baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// Consumer3</span>
<span class="token class-name">Foo</span><span class="token punctuation">(</span>
    child<span class="token punctuation">:</span> <span class="token class-name">Consumer2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
        builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> aVM<span class="token punctuation">,</span> bVM<span class="token punctuation">,</span> cVM<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> a<span class="token punctuation">,</span> child<span class="token punctuation">:</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        child<span class="token punctuation">:</span> <span class="token class-name">Baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Selector/Selector2/Selecto3，同样的也是从Provider中获取数据</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">return</span> <span class="token class-name">Selector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
    selector<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> a<span class="token punctuation">,</span>
    shouldRebuild<span class="token punctuation">:</span> <span class="token punctuation">(</span>pre<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> pre<span class="token punctuation">.</span>value <span class="token operator">==</span> next<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
    child<span class="token punctuation">:</span> <span class="token class-name">Switch</span><span class="token punctuation">(</span>
        value<span class="token punctuation">:</span> isCheck<span class="token punctuation">,</span>
        onChanged<span class="token punctuation">:</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="有对provider做过优化吗" tabindex="-1"><a class="header-anchor" href="#有对provider做过优化吗" aria-hidden="true">#</a> 有对Provider做过优化吗？</h3><ol><li><p>从Provider中获取数据的方式有三种：Provider.of()、Consmer、Selector，下面分别介绍这三种区别以及优化手段。</p></li><li><p>使用Provider.of方法，当数据更新时会直接调用使用Provider.of方法的Widge类的tbuild方法，这显然是不有好的。</p></li><li><p>Consmer其实是对Provider.of的一个优化，默认情况下数据更新并不会调用Widge类的tbuild方法而是调用Consmer的build，有时候Consmer中的build并没有Widget依赖数据，肯能是更新而已，那其实也没必要更新build中的child这时官网又提出了优化，将child换一种方式写。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 原版</span>
<span class="token keyword">return</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>
    builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> _child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>  <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;111&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 改良版</span>
<span class="token keyword">return</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>
    builder<span class="token punctuation">:</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> _child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// _child 就是Consumer构造函数中传递进来的child</span>
        <span class="token keyword">return</span> _child<span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    child<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;111&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Selector其实是一个最终改良版，能够更好的控件视图是否需要更新，通过shouldRebuild方法来抉择，同时Selector功能也很强大可以将Avm通过selector函数一些列处理变成Bvm。</p></li></ol><h3 id="有用过getx吗-简单聊聊" tabindex="-1"><a class="header-anchor" href="#有用过getx吗-简单聊聊" aria-hidden="true">#</a> 有用过GetX吗？简单聊聊？</h3><ol><li><p>GetX 是 Flutter 上的一个轻量级且强大的解决方案：高性能的状态管理、智能的依赖注入和便捷的路由管理，还有一些实用工具包括：国际化、改变主题等等。</p></li><li><p>状态管理</p><ul><li><p>目前，Flutter有几种状态管理器。但是，它们中的大多数都涉及到使用ChangeNotifier来更新widget，这对于中大型应用的性能来说是一个很糟糕的方法。</p></li><li><p>Get有两个不同的状态管理器：简单的状态管理器（GetBuilder）和响应式状态管理器（GetX），使用 Get 的响应式编程就像使用 setState 一样简单。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 让我们想象一下，你有一个名称变量，并且希望每次你改变它时，所有使用它的小组件都会自动刷新。</span>

<span class="token comment">// 这就是你的计数变量。</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Jonatas Borges&#39;</span></span><span class="token punctuation">;</span>

<span class="token comment">// 要想让它变得可观察，你只需要在它的末尾加上&quot;.obs&quot;。</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;Jonatas Borges&#39;</span></span><span class="token punctuation">.</span>obs<span class="token punctuation">;</span>

<span class="token comment">// 而在UI中，当你想显示该值并在值变化时更新页面，只需这样做。</span>
<span class="token class-name">Obx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">controller<span class="token punctuation">.</span>name</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>依赖注入</p><ul><li><p>Get有一个简单而强大的依赖管理器，它允许你只用1行代码就能检索到与你的Bloc或Controller相同的类，无需Provider context，无需inheritedWidget。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Controller</span> controller <span class="token operator">=</span> <span class="token class-name">Get</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 而不是 Controller controller = Controller();</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>Get会自动为你的控制器找到你想要的数据，而你甚至不需要任何额外的依赖关系。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 你可以实例化100万个控制器，Get总会给你正确的控制器。</span>
<span class="token class-name">Controller</span> controller <span class="token operator">=</span> <span class="token class-name">Get</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 然后你就可以恢复你在后面获得的控制器数据。</span>
<span class="token class-name">Text</span><span class="token punctuation">(</span>controller<span class="token punctuation">.</span>textFromApi<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>路由管理</p><ul><li><p>使用Gex的路由管理避免了Context的传递，例如使用：snackbars、dialogs、bottomsheets等等...</p></li><li><p>使用Getx很简单：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 在你的MaterialApp前加上 &quot;Get&quot;，把它变成GetMaterialApp。</span>

<span class="token comment">// Before: MaterialApp(</span>
<span class="token class-name">GetMaterialApp</span><span class="token punctuation">(</span> 
    home<span class="token punctuation">:</span> <span class="token class-name">RootApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 导航到新页面</span>
<span class="token class-name">Get</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token class-name">NextScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 用别名导航到新页面</span>
<span class="token class-name">Get</span><span class="token punctuation">.</span><span class="token function">toNamed</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/details&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 要关闭snackbars、dialogs、bottomsheets或任何你通常会用Navigator.pop(context)关闭的东西。</span>
<span class="token class-name">Get</span><span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 进入下一个页面，但没有返回上一个页面的选项（用于闪屏页，登录页面等）。</span>
<span class="token class-name">Get</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token class-name">NextScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//进入下一个页面并取消之前的所有路由（在购物车、投票和测试中很有用）。</span>
<span class="token class-name">Get</span><span class="token punctuation">.</span><span class="token function">offAll</span><span class="token punctuation">(</span><span class="token class-name">NextScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="什么是route和navigator-如何通过navigator管理路由" tabindex="-1"><a class="header-anchor" href="#什么是route和navigator-如何通过navigator管理路由" aria-hidden="true">#</a> 什么是Route和Navigator? 如何通过Navigator管理路由？</h3><ol><li><p>在Flutter中页面与页面或者是页面和导航之间的关系维护/页面管理，我们通常会使用路由进行统一管理。无论路由的概念如何其实底层都是维护了一个路由表，在Flutter中，路由管理主要有两个类：Route和Navigator。</p></li><li><p>Route：一个页面想要被路由统一管理，就必须被包装成一个Route，Route是一个抽象类，里面没有也没有工厂方法，所以它是不能实例化的。</p><ul><li>在开发中我们有几个常用的Route的间接子类，MaterialPageRoute（使用的较多一点）和CupertinoPageRoute以及PageRouteBuilder。 <ul><li>MaterialPageRoute在不同的平台有不同的表现。 <ul><li>对Android平台，打开一个页面会从屏幕底部滑动到屏幕的顶部，关闭页面时从顶部滑动到底部消失。</li><li>对iOS平台，打开一个页面会从屏幕右侧滑动到屏幕的左侧，关闭页面时从左侧滑动到右侧消失。</li></ul></li><li>CupertinoPageRoute：iOS平台默认使用的CupertinoPageRoute。</li><li>PageRouteBuilder： 是一个用于自定义页面过渡动画的小部件，它可以让开发者根据自己的需求创建各种自定义过渡动画。</li></ul></li></ul></li><li><p>Navigator是管理所所有Route的Widget，通过一个Stack（FILO）来进行管理的。</p><ul><li><p>我们开发中使用的MaterialApp、CupertinoApp、WidgetsApp它们默认是有插入Navigator的，所以我们在需要的时候，只需要直接使用即可。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// 通过InheritedWidget方式进行管理</span>
<span class="token class-name">Navigator</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Navigator管理路由方式（命名路由）</p><ul><li>在MaterialApp的 initialRoute 和 routes中进行管理 <ul><li>initialRoute：初始路由，设置了该属性，就不需要再设置home属性了。</li><li>routes：定义名称和路由之间的映射关系，类型为Map&lt;String, WidgetBuilder&gt;。</li><li>onGenerateRoute：我们通过pushNamed进行跳转，但是对应的name没有在routes中有映射关系，那么就会执行onGenerateRoute钩子函数。</li><li>onUnknownRoute：如果我们打开的一个路由名称是根本不存在，这个时候我们希望跳转到一个统一的错误页面。</li></ul></li></ul></li></ol><h3 id="有了解flutter混合开发吗" tabindex="-1"><a class="header-anchor" href="#有了解flutter混合开发吗" aria-hidden="true">#</a> 有了解Flutter混合开发吗？</h3><ol><li><p>Flutter的设计初衷并不是为了和其他平台项目进行混合开发，而是为了打造一个完整的跨平台应用程序，实际开发中，原有项目完全使用Flutter进行重构并不现实，对于原有项目我们更多可能采用混合开发的方式，混合开发目前有两种形式：Flutter调用原生能力和将Flutter项目嵌入到原生中。</p></li><li><p>Flutter调用原生能力，Flutter主要是通过plateformChannel与原生进行交互（注意plateformChannel并非是线程安全的），其中plateformChannel又分成三种：</p><ul><li><p>MethodChannel：用于传递方法调用（methods invocation）。</p><ul><li><p>Flutter端代码</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// 注册通道</span>
<span class="token keyword">final</span> <span class="token class-name">MethodChannel</span> _methodChannel <span class="token operator">=</span> <span class="token class-name">MethodChannel</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;ilovesshan.com/communication&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// 监听原生调用Flutter方法</span>
_methodChannel<span class="token punctuation">.</span><span class="token function">setMethodCallHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>call<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;getCurrentTime&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">dynamic</span> arguments <span class="token operator">=</span> call<span class="token punctuation">.</span>arguments<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">DateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/// Flutter调用原生方法</span>
<span class="token keyword">dynamic</span> result <span class="token operator">=</span> <span class="token keyword">await</span> _methodChannel<span class="token punctuation">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;getCurrentTime&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">&quot;message&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Android端代码（Java）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">FlutterActivity</span> <span class="token punctuation">{</span>
    <span class="token comment">// 重写configureFlutterEngine方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureFlutterEngine</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">FlutterEngine</span> flutterEngine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建MethodChannel对象</span>
        <span class="token class-name">MethodChannel</span> methodChannel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodChannel</span><span class="token punctuation">(</span>flutterEngine<span class="token punctuation">.</span><span class="token function">getDartExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBinaryMessenger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;ilovesshan.com/communication&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Flutter调用Android端方法</span>
        methodChannel<span class="token punctuation">.</span><span class="token function">setMethodCallHandler</span><span class="token punctuation">(</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;getCurrentTime&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>call<span class="token punctuation">.</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">notImplemented</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// Android端调用 Flutter方法</span>
methodChannel<span class="token punctuation">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token string">&quot;getCurrentTime&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;android invoke flutter&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MethodChannel<span class="token punctuation">.</span>Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Android端调用 Flutter方法 success: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> errorCode<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> errorMessage<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> errorDetails<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Android端调用 Flutter方法 error: &quot;</span> <span class="token operator">+</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notImplemented</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Android端调用 Flutter方法 notImplemented &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>BasicMessageChannel：用于传递字符串和半结构化的信息。</p></li><li><p>EcventChannel：用于数据流的通信（event stream）。</p></li></ul></li><li><p>将Flutter项目嵌入到原生中。</p><ul><li><p>参考链接：</p><ul><li>将 Flutter module 集成到 Android 项目：https://flutter.cn/docs/add-to-app/android/project-setup</li><li>将 Flutter module 集成到 iOS 项目：https://flutter.cn/docs/add-to-app/ios/project-setup</li></ul></li><li><p>将 Flutter module 集成到 Android 项目（依赖模块的源码）方式：</p><ul><li>创建 Flutter 模块</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>flutter create <span class="token operator">-</span>t module <span class="token operator">--</span>org com<span class="token punctuation">.</span>example my_flutter
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>通过Android Studio创建一个Android项目，确保Android项目和Flutter Module在同级目录。</p></li><li><p>将 Flutter 模块作为子项目添加到宿主应用的 <code>settings.gradle</code> 中：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token comment">// Include the host app project.</span>
include <span class="token string">&#39;:app&#39;</span>                                    <span class="token comment">// assumed existing content</span>
<span class="token function">setBinding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token punctuation">[</span>gradle<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token comment">// new</span>
<span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>                                                     <span class="token comment">// new</span>
    settingsDir<span class="token punctuation">.</span>parentFile<span class="token punctuation">,</span>                                              <span class="token comment">// new</span>
    <span class="token string">&#39;my_flutter/.android/include_flutter.groovy&#39;</span>                         <span class="token comment">// new</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span>                                                                     <span class="token comment">// new</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在你的应用中引入对 Flutter 模块的依赖</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>
    implementation <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">&#39;:flutter&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Flutter提供了一个FlutterActivity来展示Flutter界面在Android应用程序中，我们需要先对FlutterActivity进行注册，并且在src/main/res/values/themes.xml文件中添加主题资源。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>
          <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>io.flutter.embedding.android.FlutterActivity<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@style/AppTheme<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name"><span class="token namespace">android:</span>configChanges</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name"><span class="token namespace">android:</span>hardwareAccelerated</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>
          <span class="token attr-name"><span class="token namespace">android:</span>windowSoftInputMode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>adjustResize<span class="token punctuation">&quot;</span></span>
          <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/tools<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LaunchTheme<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@android:style/Theme.Black.NoTitleBar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- Show a splash screen on the activity. Automatically removed when
             Flutter draws its first frame --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android:windowBackground<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>@drawable/ic_launcher_foreground<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android:windowFullscreen<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>加载 FlutterActivity。</p><ul><li><p>打开一个默认 Flutter 初始路由（”/“）的 FlutterActivity。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>myButton<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token metadata function">@Override</span>
    public <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">startActivity</span><span class="token punctuation">(</span>  <span class="token class-name">FlutterActivity</span><span class="token punctuation">.</span><span class="token function">createDefaultIntent</span><span class="token punctuation">(</span>currentActivity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>打开一个自定义 Flutter 初始路由的 FlutterActivity。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>myButton<span class="token punctuation">.</span><span class="token function">addOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token class-name">View</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">startActivity</span><span class="token punctuation">(</span>
            <span class="token class-name">FlutterActivity</span> <span class="token punctuation">.</span><span class="token function">withNewEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">initialRoute</span><span class="token punctuation">(</span><span class="token string">&quot;/my_route&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>currentActivity<span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>踩坑</p><ul><li><p>关于Binding依赖问题，如果你的项目采用grade7.1x之后的版本直接导入一下依赖即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>api<span class="token punctuation">.</span>initialization<span class="token punctuation">.</span>resolve<span class="token punctuation">.</span></span><span class="token class-name">RepositoriesMode</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>如果启动时报错Failed to apply plugin class ‘FlutterPlugin’，打开Android project的settings.gradle：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token comment">// 修改前：repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)</span>
<span class="token comment">// 修改后：repositoriesMode.set(RepositoriesMode.PREFER_PROJECT)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>dependencyResolutionManagement <span class="token punctuation">{</span>
    repositoriesMode<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>RepositoriesMode<span class="token punctuation">.</span>PREFER_PROJECT<span class="token punctuation">)</span>
    repositories <span class="token punctuation">{</span>
        <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Warning: this repository is going to shut down soon</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果还是报错，xxx依赖找不到（下载不下来），打开Android project的build.gradle增加如下设置</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>allprojects <span class="token punctuation">{</span>
    repositories <span class="token punctuation">{</span>
        <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul></li></ol><h3 id="简述flutter热重载" tabindex="-1"><a class="header-anchor" href="#简述flutter热重载" aria-hidden="true">#</a> 简述Flutter热重载？</h3><ol><li>Flutter 的热重载是基于 JIT 编译模式的代码增量同步。由于 JIT 属于动态编译，能够将 Dart 代码编译成生成中间代码，让 Dart VM 在运行时解释执行。</li><li>热重载的流程可以分为 5 步，包括：扫描工程改动、增量编译、推送更新、代码合并、Widget 重建。Flutter 在接收到代码变更后，并不会让 App 重新启动执行，而只会触发 Widget 树的重新绘制，因此可以保持改动前的状态，大大缩短了从代码修改到看到修改产生的变化之间所需要的时间。</li><li>另一方面，由于涉及到状态的保存与恢复，涉及状态兼容与状态初始化的场景，热重载是无法支持的，如改动前后 Widget 状态无法兼容、全局变量与静态属性的更改、main 方法里的更改、initState 方法里的更改、枚举和泛型的更改等。</li><li>可以发现，热重载提高了调试 UI 的效率，非常适合写界面样式这样需要反复查看修改效果的场景。但由于其状态保存的机制所限，热重载本身也有一些无法支持的边界。</li></ol><h3 id="热重载、热重启和完全重启之间有什么区别" tabindex="-1"><a class="header-anchor" href="#热重载、热重启和完全重启之间有什么区别" aria-hidden="true">#</a> 热重载、热重启和完全重启之间有什么区别？</h3><ol><li>热重载（hot reload）：会将代码更改转入 VM，重建 widget 树并保持应用的状态，整个过程不会重新运行 <code>main()</code> 或者 <code>initState()</code>。</li><li>热重启（hot restart）：会将代码更改转入 VM，重启 Flutter 应用，不保留应用状态。</li><li>完全重启（start）： 将会完全重新运行应用。该进程较为耗时，因为它会重新编译原生部分代码。在 Web 平台上，它同时会重启 Dart 开发编译器。完全重启并没有既定的快捷键，你需要手动停止后重新运行。</li></ol><h3 id="了解flutter编译模式吗" tabindex="-1"><a class="header-anchor" href="#了解flutter编译模式吗" aria-hidden="true">#</a> 了解Flutter编译模式吗？</h3><ol><li>Flutter编译模式一共分成三种：release、profile、debug，三种模式都有自己的特点。</li><li>release模式特点 <ul><li>使用AOT（ahead of time）预编译模式，将Dart代码预编译为机器码，通过编译器生成对应平台（android/ios）能够直接运行的代码。运行速度快，执行性能好。</li><li>此模式关闭了所有的调试工具，只允许在真机上运行。</li></ul></li><li>profile模式特点 <ul><li>profile模式和release模式类似，都使用AOT预编译模式。</li><li>他们最大的区别就是：profile模式支持DevTools来检测应用的性能，做性能调试分析，release模式不支持。</li></ul></li><li>debug模式特点 <ul><li>debug模式使用了JNI（just in time）即时编译模式，该模式的典型应用就是热重载（hot reload）。</li><li>debug模式，一般是应用于开发模式，支持调试信息、服务扩展、DevTools工具、支持模拟器和整机调试。</li></ul></li></ol><h3 id="谈谈你对flutter性能优化的理解" tabindex="-1"><a class="header-anchor" href="#谈谈你对flutter性能优化的理解" aria-hidden="true">#</a> 谈谈你对Flutter性能优化的理解?</h3><ol><li>避免在build方法中执行耗时操作，因为build方法随时都有可能被执行，过多的耗时操作代码会阻塞导致UI卡顿，可以将一般耗时操作通过Future转换成异步的方式完成，对于CPU计算频繁的操作（/音视频转码/图片压缩/复杂的逻辑计算）可以考虑开启isolate充分利用CPU多核心来完成。</li><li>避免在build方法中堆叠大量的widget，应将widget拆小避免直接返回一个巨大的widget，跟细粒度的拆分能够使widget得到充分的复用（具体看业务需求）。</li><li>尽可能使用const构造器，当父widget更新了子widget也不会重新进行rebuild操作，特别是针对于一些长期不修改的组件，例如：通用的error/loading/empty等等组件。</li><li>尽量不使用ListView或者GridView的默认构造方法，而是使用他们各自的build方法，默认构造方法会让列表中所有的数据一次性绘制出来，build方法只绘制可见列表（缓存前3条，预加载后3条），类似于Android中的RecycleView。懒加载而不是一次性绘制所有的子widget，这样视图初始化的时间就减少了。</li><li>静态资源最好走CDN，过多的静态资源存放在本地，久而久之会导致包体积变大。</li><li>上传图片上传时进行图片压缩，减轻服务器压力，下载图片时最好使用缓存/图片预加载等技术。</li><li>可以适当的将对个请求合并成一个请求（看业务需求），从而减少网络IO耗时。</li><li>对于耗时操作（文件io/网络请求/json解析/音视频转码/图片压缩等等）建议通过创建子isolate来执行，避免在主isolate中执行耗时操作。</li></ol><h3 id="flutter-是怎么运转的" tabindex="-1"><a class="header-anchor" href="#flutter-是怎么运转的" aria-hidden="true">#</a> Flutter 是怎么运转的？</h3><ol><li>与用于构建移动应用程序的其他大多数框架不同，Flutter 是重写了一整套包括底层渲染逻辑和上层开发语言的完整解决方案。</li><li>这套解决方案不仅可以保证视图渲染在 Android 和 iOS 上的高度一致性（即高保帧），在代码执行效率和渲染性能上也可以媲美原生 App 的体验（即高性能）。</li></ol><h3 id="flutter组件化思想和设计原则" tabindex="-1"><a class="header-anchor" href="#flutter组件化思想和设计原则" aria-hidden="true">#</a> Flutter组件化思想和设计原则？</h3><ol><li><p>组件化又叫模块化，即基于可重用的目的，将一个大型软件系统（App）按照关注点分离的方式，拆分成多个独立的组件或模块。每个独立的组件都是一个单独的系统，可以单独维护、升级甚至直接替换，也可以依赖于别的独立组件，只要组件提供的功能不发生变化，就不会影响其他组件和软件系统的整体功能。</p></li><li><p>设计原则</p><ul><li>单一性原则：每个组件仅提供一个功能。每个组件都有自己固定的职责和清晰的边界，专注地做一件事。</li><li>抽象化原则：组件提供的功能抽象应该尽量稳定，具有高复用度。而稳定的直观表现就是对外暴露的接口很少发生变化。</li><li>稳定性原则：不要让稳定的组件依赖不稳定的组件。比如组件 A 依赖了组件 B，如果组件A很稳定，但是组件B经常变化，那么组件A也就会变得不稳定了，需要经常适配。</li><li>自完备性：即组件需要尽可能地做到自给自足，尽量减少对其他底层组件的依赖，达到代码可复用的目的。</li></ul></li></ol><h3 id="flutter平台化概念" tabindex="-1"><a class="header-anchor" href="#flutter平台化概念" aria-hidden="true">#</a> Flutter平台化概念？</h3><ol><li>平台化是组件化的升级，即在组件化的基础上，对它们提供的功能进行分类，统一分层划分，增加依赖治理的概念。</li><li>与组件化更关注组件的独立性相比，平台化更关注的是组件之间关系的合理性，而这也是在设计平台化架构时需要重点考虑的单向依赖原则。</li></ol><h3 id="flutter发布android应用流程" tabindex="-1"><a class="header-anchor" href="#flutter发布android应用流程" aria-hidden="true">#</a> Flutter发布Android应用流程？</h3><ol><li><p>发布Android版APP参考地址：https://doc.flutterchina.club/android-release/</p></li><li><p>添加应用配置文件信息</p><ul><li>APP版本号 <ul><li>1.0.0+1 --&gt; 主版本.次版本.补丁版本 + 内部维护版本</li><li>主版本（major version）：软件整体重写，或出现不向后兼容的改变时增加此版本。</li><li>次版本（minor version）：出现新功能时增加此版本。</li><li>补丁版本（patch version）：如修复bug，只要有修改就增加此版本。</li><li>内部维护版本：主要是给开发人员使用。</li></ul></li><li>APP名称和启动图标</li><li>APP运行时权限（注意android6【API 23】之后部分权限需要动态申请）</li></ul></li><li><p>创建并配置应用签名</p><ul><li><p>创建 app签名keystore(jks)文件，keytool是jdk带的工具。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>keytool -genkey -v -keystore /D:/key.jks -keyalg RSA -keysize 2048 -validity 10000 -alias key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置签名</p><ul><li><p>android目录下build.gradle同级目录下创建一个名为key.properties的文件。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>storePassword=123456
keyPassword=123456
keyAlias=key
storeFile=D:/key.jks
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>android/app/build.gradle文件为您的应用配置签名.</p><ul><li><p>在android{}同级目录添加如下配置。</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token keyword">def</span> keystorePropertiesFile <span class="token operator">=</span> rootProject<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;key.properties&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">def</span> keystoreProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
keystoreProperties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>keystorePropertiesFile<span class="token punctuation">)</span><span class="token punctuation">)</span>

android <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>buildType同级做如下修改，增加signingConfigs。</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>signingConfigs <span class="token punctuation">{</span>
    release <span class="token punctuation">{</span>
        keyAlias keystoreProperties<span class="token punctuation">[</span><span class="token string">&#39;keyAlias&#39;</span><span class="token punctuation">]</span>
        keyPassword keystoreProperties<span class="token punctuation">[</span><span class="token string">&#39;keyPassword&#39;</span><span class="token punctuation">]</span>
        storeFile <span class="token function">file</span><span class="token punctuation">(</span>keystoreProperties<span class="token punctuation">[</span><span class="token string">&#39;storeFile&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        storePassword keystoreProperties<span class="token punctuation">[</span><span class="token string">&#39;storePassword&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
buildTypes <span class="token punctuation">{</span>
    release <span class="token punctuation">{</span>
        signingConfig signingConfigs<span class="token punctuation">.</span>release
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li></ul></li><li><p>开启混淆，默认情况下 flutter 不会开启 Android 的混淆。如果使用了第三方 Java 或 Android 库，也许你想减小 apk 文件的大小或者防止代码被逆向破解。</p><ul><li><p>创建 <code>/android/app/proguard-rules.pro</code> 文件，并添加以下规则：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>#Flutter Wrapper
<span class="token operator">-</span>keep <span class="token keyword">class</span> <span class="token class-name">io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>app<span class="token punctuation">.</span></span><span class="token operator">**</span> <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token operator">-</span>keep <span class="token keyword">class</span> <span class="token class-name">io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span></span><span class="token operator">**</span>  <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token operator">-</span>keep <span class="token keyword">class</span> <span class="token class-name">io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">**</span>  <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token operator">-</span>keep <span class="token keyword">class</span> <span class="token class-name">io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token operator">**</span>  <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token operator">-</span>keep <span class="token keyword">class</span> <span class="token class-name">io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span></span><span class="token operator">**</span>  <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token operator">-</span>keep <span class="token keyword">class</span> <span class="token class-name">io<span class="token punctuation">.</span>flutter<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token operator">**</span>  <span class="token punctuation">{</span> <span class="token operator">*</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>开启混淆/压缩，上述配置只混淆了 Flutter 引擎库，任何其他库（比如 Firebase）需要添加与之对应的规则，打开 <code>/android/app/build.gradle</code> 文件，定位到 <code>buildTypes</code> 块。在 <code>release </code> 配置中将 <code>minifyEnabled </code> 和 <code>useProguard </code> 设为 <code>true</code>，再将混淆文件指向上一步创建的文件。</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>android <span class="token punctuation">{</span>
    buildTypes <span class="token punctuation">{</span>
        release <span class="token punctuation">{</span>
            signingConfig signingConfigs<span class="token punctuation">.</span>release
            minifyEnabled <span class="token boolean">true</span>
            useProguard <span class="token boolean">true</span>
            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">&#39;proguard-android.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;proguard-rules.pro&#39;</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>将用于打包成APK文件ARB文件</p><ol><li>自定义打包名称规则</li></ol><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>android <span class="token punctuation">{</span>
    compileSdkVersion <span class="token number">30</span>

    android<span class="token punctuation">.</span>applicationVariants<span class="token punctuation">.</span>all <span class="token punctuation">{</span>
        variant <span class="token operator">-&gt;</span>
        variant<span class="token punctuation">.</span>outputs<span class="token punctuation">.</span>all <span class="token punctuation">{</span>
            <span class="token comment">//在这里修改apk文件名</span>
            outputFileName <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;Floating-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">variant<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-v</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">variant<span class="token punctuation">.</span>versionName</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.apk&quot;</span></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>打包成APK（Android Package）</li></ol><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>flutter build apk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>打包成AAB（Android App Bundles）</li></ol><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>flutter build appbundle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>APK和AAB区别</li></ol><ul><li>AAB包进行安装时会新针对不同设备的支持重新打包成apk文件，比如对应小米手机的apk包，就只包含小米手机的支持内容，而不再带有三星手机支持，动态打包仅打包所需资源。</li><li>aab格式的包不能直接通过aab包的形式安装到手机，APK可以直接安装到手机。</li><li>大部分由于市场支持APK，而少部分支持AAB。</li></ul></li><li><p>发布应用市场</p><ul><li>国内应用市场很多：华为、360、小米等等等</li></ul></li></ol><h3 id="flutter发布ios应用流程" tabindex="-1"><a class="header-anchor" href="#flutter发布ios应用流程" aria-hidden="true">#</a> Flutter发布Ios应用流程？</h3><p>发布IOS版APP参考地址：https://doc.flutterchina.club/ios-release/</p>`,95),c=[o];function u(d,r){return s(),a("div",null,c)}const v=n(i,[["render",u],["__file","flutter.html.vue"]]);export{v as default};

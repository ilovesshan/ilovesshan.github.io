import{_ as l,p as i,q as e,a1 as t}from"./framework-96b046e1.js";const a={},o=t('<h1 id="网络安全" tabindex="-1"><a class="header-anchor" href="#网络安全" aria-hidden="true">#</a> 网络安全</h1><h3 id="什么情况会出现跨域" tabindex="-1"><a class="header-anchor" href="#什么情况会出现跨域" aria-hidden="true">#</a> 什么情况会出现跨域？</h3><ol><li>由于受到浏览器的安全限制策略（同源策略），所以在浏览器中发送AJAX请求会出现跨域问题。</li><li>同源策略，在一串IP地址中，只要以下任意一个条件不同就会产生跨域。 <ul><li>协议不同</li><li>域名不同</li><li>IP端口不同</li></ul></li><li>浏览器的同源策略不是说拒绝发送AJAX请求，而是不接收跨域请求的响应数据。</li></ol><h3 id="如何解决跨域" tabindex="-1"><a class="header-anchor" href="#如何解决跨域" aria-hidden="true">#</a> 如何解决跨域？</h3><ol><li><p>通过JSONP（利用script标签不跨域的特点，但是只支持GET）。</p></li><li><p>配置webpack代理/nginx代理。</p></li><li><p>后端设置 CORS Header。</p><table><thead><tr><th style="text-align:left;">CORS Header属性</th><th style="text-align:left;">解释</th></tr></thead><tbody><tr><td style="text-align:left;">Access-Control-Allow-Origin</td><td style="text-align:left;">允许http://www.xxx.com域（自行设置，这里只做示例）发起跨域请求</td></tr><tr><td style="text-align:left;">Access-Control-Max-Age</td><td style="text-align:left;">设置在86400秒不需要再发送预校验请求</td></tr><tr><td style="text-align:left;">Access-Control-Allow-Methods</td><td style="text-align:left;">设置允许跨域请求的方法</td></tr><tr><td style="text-align:left;">Access-Control-Allow-Headers</td><td style="text-align:left;">允许跨域请求包含content-type</td></tr><tr><td style="text-align:left;">Access-Control-Allow-Credentials</td><td style="text-align:left;">设置允许Cookie</td></tr></tbody></table></li></ol><h3 id="什么是认证和授权-如何设计一个权限认证框架" tabindex="-1"><a class="header-anchor" href="#什么是认证和授权-如何设计一个权限认证框架" aria-hidden="true">#</a> 什么是认证和授权？如何设计⼀个权限认证框架？</h3><ol><li>认证： 就是对系统访问者的身份进⾏确认。</li><li>授权：就是对系统访问者的⾏为进⾏控制。授权通常是在认证之后，对系统内的⽤户隐私数据进⾏护，包括：后台接⼝访问权限、前台控件的访问权限。</li><li>RBAC模型： 主体 -&gt; ⻆⾊ -&gt; 资源 -&gt; 访问系统的⾏为。</li><li>认证和授权也是对⼀个权限认证框架进⾏扩展的两个主要的⽅⾯。</li></ol><h3 id="如果没有cookie-session还能进行身份验证吗" tabindex="-1"><a class="header-anchor" href="#如果没有cookie-session还能进行身份验证吗" aria-hidden="true">#</a> 如果没有Cookie,Session还能进⾏身份验证吗？</h3><ol><li>当服务器tomcat第⼀次接收到客户端的请求时，会开辟⼀块独⽴的session空间，建⽴⼀个session对象，同时会⽣成⼀个session id，通过响应头的⽅式保存到客户端浏览器的cookie当中。以后客户端的每次请求，都会在请求头部带上这个session id，这样就可以对应上服务端的⼀些会话的相关信息，⽐如⽤户的登录状态。</li><li>如果没有客户端的Cookie，Session是⽆法进⾏身份验证的。</li></ol><h3 id="什么是csrf攻击-如何防止" tabindex="-1"><a class="header-anchor" href="#什么是csrf攻击-如何防止" aria-hidden="true">#</a> 什么是CSRF攻击？如何防⽌？</h3><ol><li>CSRF： Cross Site Requst Forgery 跨站请求伪造，⼀个正常的请求会将合法⽤户的session id保存到浏览器的cookie。这时候，如果⽤户在浏览器中打来另⼀个tab⻚， 那这个tab⻚也是可以获得浏览器的cookie。⿊客就可以利⽤这个cookie信息进⾏攻击。</li><li>CSRF防⽌⽅式： <ul><li>尽量使⽤POST请求，限制GET请求。POST请求可以带请求体，攻击者就不容易伪造出请求。</li><li>将cookie设置为HttpOnly : respose.setHeader(&quot;SetCookie&quot;,&quot;cookiename=cookievalue;HttpOnly&quot;)。</li><li>增加token。</li><li>在请求中放⼊⼀个攻击者⽆法伪造的信息，并且该信息不存在于cookie当中。这也是SpringSecurity框架中采⽤的防范⽅式。</li></ul></li></ol><h3 id="什么是oauth2-0协议-有哪几种认证方式" tabindex="-1"><a class="header-anchor" href="#什么是oauth2-0协议-有哪几种认证方式" aria-hidden="true">#</a> 什么是OAuth2.0协议？有哪⼏种认证⽅式？</h3><ol><li><p>OAuth2.0是⼀个开放标准，允许⽤户授权第三⽅应⽤程序访问他们存储在另外的服务提供者上的信息，⽽不需要将⽤户名和密码提供给第三⽅应⽤或分享他们数据的所有内容。</p></li><li><p>OAuth2.0协议的认证流程，简单理解，就是允许我们将之前的授权和认证过程交给⼀个独⽴的第三⽅进⾏担保。</p></li><li><p>OAuth2.0协议中的几个角色：</p><ul><li>客户端：本身不存储资源，需要通过资源拥有者的授权去请求资源服务器的资源。</li><li>资源拥有者：通常为用户，也可以是应用程序，即该资源的拥有者。</li><li>授权服务器（也称认证服务器）：用于服务提供商对资源拥有的身份进行认证、对访问资源进行授权，认证成功后会给客户端发放令牌 （access_token），作为客户端访问资源服务器的凭据。l例如：微信的认证服务器、支付宝的认证服务器。</li><li>资源服务器：存储资源的服务器。 <ul><li>例如：微信、支付宝等包含用户信息服务器，可以通过认证服务器认证之后，通过access_token获取微信、支付宝保存的用户信息。</li></ul></li></ul></li><li><p>OAuth2.0协议有四种认证⽅式：</p><ul><li>授权码模式</li><li>简化模式</li><li>密码模式</li><li>客户端模式</li></ul></li></ol><h3 id="什么是sso-与oauth2-0有什么关系" tabindex="-1"><a class="header-anchor" href="#什么是sso-与oauth2-0有什么关系" aria-hidden="true">#</a> 什么是SSO？与OAuth2.0有什么关系？</h3><ol><li>OAuth2.0的使⽤场景通常称为联合登录， ⼀处注册，多处使⽤。</li><li>SSO （Single Sign On） 单点登录。 ⼀处登录，多处同时登录。</li></ol><h3 id="如何设计一个开放授权平台" tabindex="-1"><a class="header-anchor" href="#如何设计一个开放授权平台" aria-hidden="true">#</a> 如何设计⼀个开放授权平台？</h3><ol><li><p>开放授权平台也可以按照认证和授权两个⽅向来梳理。</p></li><li><p>认证： 就可以按照OAuth2.0协议来规划认证的过程。</p></li><li><p>授权：</p><ul><li>⾸先需要待接⼊的第三⽅应⽤在开放授权平台进⾏注册，注册需要提供⼏个必要的信息clintID, 消息推送地址，密钥(⼀对公私钥，私钥由授权平台⾃⼰保存，公钥分发给第三⽅应⽤)。</li><li>然后，第三⽅应⽤引导客户发起请求时，采⽤公钥进⾏参数加密，授权开放平台使⽤对应的私钥解密。</li><li>接下来：授权开放平台同步响应第三⽅应⽤的只是消息是否处理成功的结果。⽽真正的业务数据由授权开放平台异步推动给第三⽅应⽤预留的推送地址。</li></ul></li></ol><h3 id="tcp的三次握手和四次挥手" tabindex="-1"><a class="header-anchor" href="#tcp的三次握手和四次挥手" aria-hidden="true">#</a> TCP的三次握⼿和四次挥⼿？</h3><ol><li><p>TCP协议是7层⽹络协议中的传输层协议，负责数据的可靠传输。</p></li><li><p>在建⽴TCP连接时，需要通过三次握⼿来建⽴，过程是：</p><ul><li>客户端向服务端发送⼀个SYN。</li><li>服务端接收到SYN后，给客户端发送⼀个SYN_ACK。</li><li>客户端接收到SYN_ACK后，再给服务端发送⼀个ACK。</li></ul></li><li><p>在断开TCP连接时，需要通过四次挥⼿来断开，过程是：</p><ul><li>客户端向服务端发送FIN</li><li>服务端接收FIN后，向客户端发送ACK，表示我接收到了断开连接的请求，客户端你可以不发数据了，不过服务端这边可能还有数据正在处理。</li><li>服务端处理完所有数据后，向客户端发送FIN，表示服务端现在可以断开连接。</li><li>客户端收到服务端的FIN，向服务端发送ACK，表示客户端也会断开连接了。</li></ul></li></ol><h3 id="浏览器发出一个请求到收到响应经历了哪些步骤" tabindex="-1"><a class="header-anchor" href="#浏览器发出一个请求到收到响应经历了哪些步骤" aria-hidden="true">#</a> 浏览器发出⼀个请求到收到响应经历了哪些步骤？</h3><ol><li>浏览器解析⽤户输⼊的URL，⽣成⼀个HTTP格式的请求。</li><li>先根据URL域名从本地hosts⽂件查找是否有映射IP，如果没有就将域名发送给电脑所配置的DNS进⾏域名解析，得到IP地址。</li><li>浏览器通过操作系统将请求通过四层⽹络协议发送出去，途中可能会经过各种路由器、交换机，最终到达服务器。</li><li>服务器收到请求后，根据请求所指定的端⼝，将请求传递给绑定了该端⼝的应⽤程序，⽐如8080被tomcat占⽤了。</li><li>tomcat接收到请求数据后，按照http协议的格式进⾏解析，解析得到所要访问的servlet。</li><li>然后servlet来处理这个请求，如果是SpringMVC中的DispatcherServlet，那么则会找到对应的Controller中的⽅法，并执⾏该⽅法得到结果。</li><li>Tomcat得到响应结果后封装成HTTP响应的格式，并再次通过⽹络发送给浏览器所在的服务器。</li><li>浏览器所在的服务器拿到结果后再传递给浏览器，浏览器则负责解析并渲染。</li></ol><h3 id="零拷⻉是什么" tabindex="-1"><a class="header-anchor" href="#零拷⻉是什么" aria-hidden="true">#</a> 零拷⻉是什么？</h3><ol><li>零拷⻉指的是，应⽤程序在需要把内核中的⼀块区域数据转移到另外⼀块内核区域去时，不需要经过先复制到⽤户空间，再转移到⽬标内核区域去了，⽽直接实现转移。</li></ol>',23),r=[o];function s(d,h){return i(),e("div",null,r)}const c=l(a,[["render",s],["__file","networksecurity.html.vue"]]);export{c as default};

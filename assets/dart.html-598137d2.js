import{_ as p,M as o,p as c,q as l,R as n,t as s,N as e,a1 as a}from"./framework-96b046e1.js";const i="/assets/image-20230509101344012-eac4ef7c.png",u="/assets/image-20230508150157425-3741d090.png",r={},d=a(`<h1 id="dart" tabindex="-1"><a class="header-anchor" href="#dart" aria-hidden="true">#</a> Dart</h1><h3 id="什么是dart语言" tabindex="-1"><a class="header-anchor" href="#什么是dart语言" aria-hidden="true">#</a> 什么是Dart语言？</h3><p>Dart是一门面向对象（允许单继承）、垃圾回收的编程语言，它由google公司维护。</p><h3 id="flutter为什么推荐使用dart语言" tabindex="-1"><a class="header-anchor" href="#flutter为什么推荐使用dart语言" aria-hidden="true">#</a> flutter为什么推荐使用Dart语言？</h3><ol><li>Flutter将Dart作为首选语言的原因： <ul><li>Dart是AOT（ahead of time）运行前编译，使用AOT语言的优点就是使Flutter具有更好的性能。</li><li>Dart也可以通过JIT（just in time）即时编译，典型应用就是Flutter的热重载。</li><li>Dart也允许FLutter使用JSX或者XML之类的作为界面构建的声明语言，这使得程序更易阅读和理解。</li></ul></li></ol><h3 id="dart中dynamic、var、object区别" tabindex="-1"><a class="header-anchor" href="#dart中dynamic、var、object区别" aria-hidden="true">#</a> Dart中dynamic、var、Object区别</h3><ol><li>var定义的类型是不可变的，而dynamic和Object定义的类型是可变的。</li><li>dynamic和Object最大的区别就是：dynamic编译期间不会进行类型检测而Object会。</li></ol><h3 id="dart中const和final区别" tabindex="-1"><a class="header-anchor" href="#dart中const和final区别" aria-hidden="true">#</a> Dart中const和final区别？</h3><ol><li>相同点：const和final都表示常量，意味第一次赋值之后就不能被修改。</li><li>不同点： <ul><li>const修饰变量只能在编译期赋值、final 用来修饰变量可以在运行时赋值。</li><li>const不可以修饰实例变量、final可修饰实例变量。</li><li>const修饰的List集合任意索引不可修改，final修饰的可以修改。</li><li>当const修饰类的构造函数时，它要求该类的所有成员都必须是final的。</li></ul></li></ol><h3 id="dart箭头函数以及使用场景" tabindex="-1"><a class="header-anchor" href="#dart箭头函数以及使用场景" aria-hidden="true">#</a> Dart箭头函数以及使用场景？</h3><ol><li>Dart箭头函数主要是用于简化代码写法（语法糖），提高开发效率以及提高代码简洁性。</li><li>Dart箭头函数使用场景 <ul><li>当方法只有一个表达式作为返回值的时候。</li><li>当代码只有单行的时候。</li><li><code>=&gt;</code> 和<code>;</code> 之间只能关联一个表达式，不能出现语句。</li></ul></li></ol><h3 id="dart中如何区分必填参数和可选参数" tabindex="-1"><a class="header-anchor" href="#dart中如何区分必填参数和可选参数" aria-hidden="true">#</a> Dart中如何区分必填参数和可选参数？</h3><ol><li><p>必填参数：Dart需要通过必填参数来完成函数或者方法的定义。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span>num n1<span class="token punctuation">,</span> num n2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可选参数：可选参数必须放在必填参数之后。</p></li><li><p>Dart中可选参数的声明方式</p><ul><li><p>通过<code>[]</code> 来定义，也可以赋默认值。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span>num n1<span class="token punctuation">,</span> <span class="token punctuation">[</span>int<span class="token operator">?</span> a1， int<span class="token operator">?</span> a2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">foo1</span><span class="token punctuation">(</span>num n1<span class="token punctuation">,</span> <span class="token punctuation">[</span>int<span class="token operator">?</span> a1<span class="token punctuation">,</span> int<span class="token operator">?</span> a2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过<code>{}</code> 来定义，也可以赋默认值。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">foo3</span><span class="token punctuation">(</span>num n1<span class="token punctuation">,</span> <span class="token punctuation">{</span>int<span class="token operator">?</span> a1<span class="token punctuation">,</span> int<span class="token operator">?</span> a2<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">foo4</span><span class="token punctuation">(</span>num n1<span class="token punctuation">,</span> <span class="token punctuation">{</span>int<span class="token operator">?</span> a1<span class="token punctuation">,</span> int<span class="token operator">?</span> a2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="位置可选参数和名称可选参数区别" tabindex="-1"><a class="header-anchor" href="#位置可选参数和名称可选参数区别" aria-hidden="true">#</a> 位置可选参数和名称可选参数区别？</h3><ol><li><p>名称可选参数和位置可选参数都属于可选参数。</p></li><li><p>位置可选参数是通过 <code>{}</code> 来定义。</p><ul><li>调用<code>foo</code> 时：<code> foo(10, 20, 30);</code>，需要注意：如果需要给 <code>a2</code> 传值就必须保证<code>a2</code>卡面参数都有值（默认值）。</li><li>调用<code>foo1</code> 时：<code>foo1(10);</code></li></ul></li><li><p>名称可选参数是通过 <code>[]</code> 来定义。</p><ul><li>调用<code>foo2</code> 时：<code>foo2(10, a1: 20);</code></li><li>调用<code>foo3</code> 时：<code>foo3(10, a1: 20, a2: 30);</code></li></ul></li></ol><h3 id="dart中-和-的用法" tabindex="-1"><a class="header-anchor" href="#dart中-和-的用法" aria-hidden="true">#</a> Dart中..和...的用法？</h3><ol><li><p><code>..</code>：称为级联符号象，可以实现对一个对象的连续调用，省去变量创建，实现链式调用。</p></li><li><p><code>...</code>：用来拼接集合，如List，Map等。</p></li></ol><h3 id="如何理解-、-、-三者的异同" tabindex="-1"><a class="header-anchor" href="#如何理解-、-、-三者的异同" aria-hidden="true">#</a> 如何理解 ??、?.、??=三者的异同？</h3><ol><li><p><code>??</code>是一个空赋值操作符，当表达式左侧不为空的时候就返回左侧表达式值否则返回右侧表达式值。</p></li><li><p><code>?.</code>是一个条件属性访问符，用于访问可能为空的对象或者属性，<code>?.</code>也可用于单个表达式中。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// 如果school为空，则下述代码返回null且永远不会再访问name属性</span>
<span class="token keyword">final</span> schoolName <span class="token operator">=</span>  user<span class="token operator">?</span><span class="token punctuation">.</span>school<span class="token operator">?</span><span class="token punctuation">.</span>name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>??=</code>运算符，该运算符仅在变量值为空的时候才赋值。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int a<span class="token punctuation">;</span> <span class="token comment">// 定义了变量，并未赋值，所以这里变量值为 null</span>
a <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- 打印 3</span>

a <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- 依然打印 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="如何理解-和-的异同" tabindex="-1"><a class="header-anchor" href="#如何理解-和-的异同" aria-hidden="true">#</a> 如何理解 ？和 ！的异同？</h3><ol><li><p><code>?</code> 操作符跟在类型后面，表示当前变量可为null。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>int a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//这句代码在有空安全时，编译会提示错误</span>

<span class="token comment">// 如果想给一个变量赋值null要如何处理呢？只需要在类型后面添加操作符?即可</span>
int<span class="token operator">?</span> a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>！</code>需要开发者保证变量不为<code>null</code>,否则会抛出异常。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> <span class="token function">patchView</span><span class="token punctuation">(</span><span class="token class-name">AppView</span> appview<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 这里需要保证appview不能为空</span>
    <span class="token class-name">ViewHander</span> viewHnadler <span class="token operator">=</span> appview<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="non-nullable-by-default-是什么意思" tabindex="-1"><a class="header-anchor" href="#non-nullable-by-default-是什么意思" aria-hidden="true">#</a> non-nullable by default 是什么意思？</h3><ol><li>意味着dart中声明的任何变量不能为空。</li><li>不可以在没赋值之前访问该变量，变量也不能被赋值为 <code>null</code>。</li></ol><h3 id="dart作用域" tabindex="-1"><a class="header-anchor" href="#dart作用域" aria-hidden="true">#</a> Dart作用域</h3><ol><li>Dart 没有 「public」「private」等关键字，默认就是公开的，私有变量使用 下划线 <em>开头。“</em>”的限制范围并不是类访问级别的，而是库访问级别。</li></ol><h3 id="dart中-是什么意思" tabindex="-1"><a class="header-anchor" href="#dart中-是什么意思" aria-hidden="true">#</a> Dart中._()是什么意思？</h3><ol><li><p>Dart没有想 Java语言那样的Private访问修饰语，在Dart中以下划线开头的变量或者函数则表示是私有的。需要注意：Dart中公有和私有的界定是以文件界定的，并不是通过类界定的。</p><ul><li><p>user.dart</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token comment">// 共有变量可以直接操作且访问</span>
  <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;jack&quot;</span></span><span class="token punctuation">;</span>

  <span class="token comment">// 私有变量不能直接访问更不能操作</span>
  int _age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

  <span class="token comment">// 给外界提供 get方法（否则将不能访问到age属性）</span>
  int <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> _age<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>home.dart</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;user.dart&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// jack</span>
    user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;lucy&quot;</span></span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lucy</span>

    <span class="token comment">// print(user.age); // 尝试访问私有属性编译时就不能通过</span>
    <span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 10</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><code>Class._();</code> 的函数可能是一个构造函数，但是<code>Class._();</code> 不是必须的，除非你想要在构造函数中执行某些操作。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> args<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">People</span> people1 <span class="token operator">=</span> <span class="token class-name">People</span><span class="token punctuation">.</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
    <span class="token class-name">People</span><span class="token punctuation">.</span><span class="token function">_</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;People构造函数被执行...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="如何填充dart-list" tabindex="-1"><a class="header-anchor" href="#如何填充dart-list" aria-hidden="true">#</a> 如何填充Dart LIst？</h3><ol><li><p>可以使用传统的for循环。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> ints <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ints<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以使用 <code>List.filled</code> 更简便的方法。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> ints <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">filled</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="如何取两个list的交差并集" tabindex="-1"><a class="header-anchor" href="#如何取两个list的交差并集" aria-hidden="true">#</a> 如何取两个List的交差并集？</h3><ol><li><p>取交集、差集、并集</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 取交集 [5]</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> jiaoji <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> arr2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 取差集(arr1相对于arr2没有的) [1, 2, 3, 4]</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> chaji <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token operator">!</span>arr2<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 取并集  [1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> bingji <span class="token operator">=</span> chaji<span class="token punctuation">;</span>
bingji<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="dart如何将list转换成map" tabindex="-1"><a class="header-anchor" href="#dart如何将list转换成map" aria-hidden="true">#</a> Dart如何将List转换成Map？</h3><ol><li><p>通过 <code>Map&lt;K,V&gt;.fromIterable</code> 方法</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> numbers <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> map <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> int<span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token function">fromIterable</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span>  key<span class="token punctuation">:</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> item<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> item <span class="token operator">*</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {1: 1, 2: 4, 3: 9}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>*collection-for </code>方法(从 Dart 2.3 开始支持此方法)</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">final</span> numbers <span class="token operator">=</span> <span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
<span class="token keyword">final</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> numbers<span class="token punctuation">)</span> i<span class="token punctuation">:</span> i <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {1: 10, 2: 20, 3: 30}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="dart中如何比较两个日期" tabindex="-1"><a class="header-anchor" href="#dart中如何比较两个日期" aria-hidden="true">#</a> Dart中如何比较两个日期？</h3><ol><li><p>先将时间想办法转成 <code>DateTime</code> 类型，在调用 <code>isAtSameMomentAs()</code> 方法比较即可。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String t1 = &quot;2028-01-03 12:00:00&quot;;
String t2 = &quot;2028-01-03 12:00:00&quot;;
String t3 = &#39;2020-02-03T08:30:00.000Z&#39;;

DateTime d1 = DateTime.parse(t1);
DateTime d2 = DateTime.parse(t2);
DateTime d3 = DateTime.parse(t3);

// true
print(d2.isAtSameMomentAs(d1));

// false
print(d2.isAtSameMomentAs(d3));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="dart中extends-mixin-implements、extension区别" tabindex="-1"><a class="header-anchor" href="#dart中extends-mixin-implements、extension区别" aria-hidden="true">#</a> Dart中extends, mixin, implements、extension区别？</h3><ol><li><p>extends（继承）</p><ul><li>Dart中继承是单继承。</li><li>构造函数或者析构函数不能继承。</li><li>子类重写父类方法要在方法前加@override。</li><li>子类调用父类的方法用super。</li><li>Dart中子类可以访问父类的所有变量和方法。</li></ul></li><li><p>mixin（混入）</p><ul><li>通过混入mixins的方式,可以把一个类的方法或者属性混入到另外一个类中,供其使用。</li><li>扩展了单继承的缺点。</li></ul></li><li><p>implements（实现）</p><ul><li>实现某个接口,接口中的所有方法和成员变量必须都进行实现。</li></ul></li><li><p>extension（扩展）</p><ul><li>在Dart 2.7 版本中，Dart新加入了一个重要的语法功能，叫做extension。Extension的主要功能给已经存在的类添加新的member function，往里面增加新的函数。通过extension, 我们可以向诸如 Iterable, String 这样的常用类里面增加一些方便的函数。</li></ul></li><li><p>总结</p><p><img src="`+i+`" alt="image-20230509101344012"></p></li></ol><h3 id="如何在dart中将异步函数声明为变量" tabindex="-1"><a class="header-anchor" href="#如何在dart中将异步函数声明为变量" aria-hidden="true">#</a> 如何在Dart中将异步函数声明为变量？</h3><ol><li><p>通过 <code>typedef</code> 定义函数类型</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">typedef</span> <span class="token class-name">Func1</span> <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>int n1<span class="token punctuation">,</span> int n2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token class-name">Func2</span> <span class="token operator">=</span> <span class="token class-name">String</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token class-name">Func3</span> <span class="token operator">=</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Function</span><span class="token punctuation">(</span>bool isSuccess<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">FuncFactory</span> <span class="token punctuation">{</span>
    <span class="token function">testFunc</span><span class="token punctuation">(</span><span class="token class-name">Func1</span> func1<span class="token punctuation">,</span> <span class="token class-name">Func2</span> func2<span class="token punctuation">,</span> <span class="token class-name">Func3</span> func3<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 调用</span>
        <span class="token function">func1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">func2</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;调用func2函数...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">func3</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;操作成功&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">FuncFactory</span> <span class="token keyword">factory</span> <span class="token operator">=</span>  <span class="token class-name">FuncFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">factory</span><span class="token punctuation">.</span><span class="token function">testFunc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span>isSuccess<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>定义普通函数为变量</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var callback = (int n1, int n2) =&gt; n1 + n2;
int value = callback(10,20);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在普通函数基础之上，dart 提供了一个 Future 语法糖。只要变更该函数返回类型为一个 Future 就可以了。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>
    <span class="token comment">// 声明函数类型，注意解决：Non-nullable instance field &#39;loadData&#39; must be initialized.</span>
    late <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> loadDataVar<span class="token punctuation">;</span>
    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;Do async stuff...&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        loadDataVar <span class="token operator">=</span> asyncFunc<span class="token punctuation">;</span>
        <span class="token function">loadDataVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;done....&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="如何判定一个异步void方法执行完毕" tabindex="-1"><a class="header-anchor" href="#如何判定一个异步void方法执行完毕" aria-hidden="true">#</a> 如何判定一个异步void方法执行完毕？</h3><ol><li><p>修改返回值类型为：<code>Future&lt;void&gt;</code></p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">openData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
  <span class="token comment">// 处理业务逻辑...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>此时你就可以通过 <code>await</code> 或者 <code>then</code> 来观察方法是否执行完毕</p></li></ol><h3 id="future在dart中的应用" tabindex="-1"><a class="header-anchor" href="#future在dart中的应用" aria-hidden="true">#</a> Future在Dart中的应用？</h3><ol><li><p>Dart 中的异步操作主要使用 <code>Future</code> 与 <code>async/await</code>，可以把 <code>Future</code> 理解为是一个自带 callback 效果的类，callback 主要告诉调用者异步函数的执行结果是成功还是失败。</p></li><li><p>Future 实例有 3 个常用方法：</p><ul><li>then((value){...}): 正常运行时执行。</li><li>catchError((err){...}): 出现错误时执行，如果异常不在预期之内，将会抛出类型为 <code>Future&lt;void&gt;</code> 的异常。</li><li>whenComplete((){...}): 不管成功与否都会执行。</li></ul></li><li><p>Future 同时还支持链式调用，Future 可以在 then()方法中返回另一个 Future 实例, 从而达到链式调用的效果。</p></li><li><p>Future 除了默认构造器外, 还提供了几个常用的命名构造器：</p><ul><li>Future.value(): 创建一个返回具体数据的 Future 实例。</li><li>Future.error(): 创建一个返回错误的 Future 实例。</li><li>Future.delayed(): 创建一个延时执行的 Future 实例。</li></ul></li><li><p>Future是异步操作，并且存在两种状态： <code>Uncompleted</code> 和 <code>Completed </code>。</p></li><li><p>简单看一个Future示例</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> args<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;请求成功： = </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">value</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> onError<span class="token punctuation">:</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;请求失败： = </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">error</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">catchError</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;请求失败： = </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">error</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 使用await这种方式时，则需要手动添加try catch。</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;请求失败： = </span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">error</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>double<span class="token punctuation">&gt;</span></span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 模拟异常</span>
    <span class="token keyword">final</span> double random <span class="token operator">=</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">&gt;</span> <span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;随机值[</span><span class="token interpolation"><span class="token punctuation">\${</span><span class="token expression">double</span><span class="token punctuation">}</span></span><span class="token string">]大于0.1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> random<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="await和async在dart中的应用" tabindex="-1"><a class="header-anchor" href="#await和async在dart中的应用" aria-hidden="true">#</a> await和async在Dart中的应用？</h3><ol><li><p><code>await</code>和<code>async</code>是Dart提供的可以使用<code>同步的代码格式</code>实现<code>异步函数的调用的过程</code>的语法糖。</p></li><li><p><code>await</code> 必须在 <code>async</code> 函数中使用，<code>async</code> 函数返回的结果必须是一个 <code>Future</code>。</p></li><li><p>async（Asynchronous）允许同时进行多项异步工作。</p><ul><li>发送网络请求获取数据。</li><li>操作数据库。</li><li>IO操作（操作文件）。</li></ul></li><li><p>需要注意：</p><ul><li><p>异步功能是基于 <code>async</code>的，所以 <code>async</code> 关键字不能够省略。</p></li><li><p><code>await</code> 关键字仅在 <code>async</code> 声明的函数中起作用。</p></li><li><p>在第一个 <code>async</code> 和 <code>await</code> 之间的代码是立即执行的。</p></li></ul></li><li><p>看一个案例：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> args<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> count <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 也可以通过then获取结果</span>
    <span class="token comment">// loadData().then((value) =&gt; print(value));</span>
<span class="token punctuation">}</span>

<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>num<span class="token punctuation">&gt;</span></span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    int doneCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;开始执行网络请求任务...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    doneCount<span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;开始执行操作数据库任务...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    doneCount<span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;开始执行IO操作任务...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    doneCount<span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;结束执行任务...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> doneCount<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="async和-async-的区别" tabindex="-1"><a class="header-anchor" href="#async和-async-的区别" aria-hidden="true">#</a> async和 async*的区别？</h3><ol><li><code>async</code> 返回<code>Future</code>，而<code>async*</code>返回<code>Stream</code>。</li><li><code>async</code> 关键字可用于执行一些耗时时间较长的方法，它将返回结果以 <code>Future</code> 的形式返回 。</li><li>如果希望返回多个值，那么可以将<code>async</code>关键字替换成<code>async*</code>，它将返回结果以 <code>Stream</code> 的形式返回 。</li><li><code>async*</code> 使用返回 <code>Stream</code> 并提供了一些可以以 <code>yield</code> 关键字返回值的语法糖。</li></ol><h3 id="whencompleted和then区别" tabindex="-1"><a class="header-anchor" href="#whencompleted和then区别" aria-hidden="true">#</a> whenCompleted和then区别？</h3><ol><li>whenCompleted：Future将以错误完成或未完成时触发的一个函数，可以理解成 <code>finally</code> 。</li><li>then：当Future完成且没有发生错误时会触发的一个函数，<code>.then</code> 会返回一个新的Future对象.</li></ol><h3 id="then、onerror、catcherror区别" tabindex="-1"><a class="header-anchor" href="#then、onerror、catcherror区别" aria-hidden="true">#</a> then、onError、catchError区别？</h3><ol><li><p>函数定义：</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> then<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">FutureOr</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> <span class="token function">onValue</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token class-name">Function</span><span class="token operator">?</span> onError<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token class-name">Function</span> onError<span class="token punctuation">,</span> <span class="token punctuation">{</span>bool <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Object</span> error<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>then：当Future对象成功完成时会回调then方法中注册的第一个函数。</p></li><li><p>onError：当Future发生异时then方法中注册的第二个函数（可选的命名参数），onError只能够处理调用then的Future对象的异常。</p></li><li><p>catchError和then是同级，也是最后的保障。catchError可以处理之前所有处理过程中产生的error。</p></li></ol><h3 id="如何理解dart中的stream" tabindex="-1"><a class="header-anchor" href="#如何理解dart中的stream" aria-hidden="true">#</a> 如何理解Dart中的Stream？</h3>`,52),k={href:"https://api.dart.cn/stable/dart-async/Future-class.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://api.dart.cn/stable/dart-async/Stream-class.html",target:"_blank",rel:"noopener noreferrer"},v=n("ul",null,[n("li",null,"Future表示一个不会立即完成的计算过程（文件下载/网络请求）。与普通函数返回值不同的是异步函数会返回一个包含结果的Future对象。该Future会在准备好结果时通知调用者。"),n("li",null,"Stream是一系列异步事件的序列，类似于一个异步的Iterable，不同的是你向Iterable获取下一个事件时会立即给你，而Stream则不会立即给你而是在它准备好时告诉你。")],-1),b=a("<li>Stream就是流，可以理解成是一个管道，它会在上一个事件完成时通知你进行下一个事件处理。</li><li>你可以使用 Stream API 中的 <code>listen()</code> 方法和 <strong>await for</strong> 关键字来处理一个 Stream。</li><li>Stream 有两种类型：Single-Subscription （单一订阅）和 Broadcast（广播）。 <ul><li>单一订阅 ： <ul><li>单一订阅是最常见最基本的Stream，它基于事件队列来存放事件（sequence of events），所以单一订阅必须以正确的顺序交付事件，并且在这期间不能出现任何异常。</li><li>这些流时当你在读取文件或者发送网络请求时产生的流，当你开始监听流时，数据将会被提取并以块的方式提供。</li><li>这些流不具备幂等性，再次接收时可能会不同于上一次的请求。</li></ul></li><li>广播 <ul><li>可以随时监听这种流，并且在收听时会触发事件。</li><li>多个收听者可以同时收听，您可以在取消上一个订阅后稍后再次收听。</li></ul></li></ul></li>",3),g=a('<h3 id="简述future和stream-的异同" tabindex="-1"><a class="header-anchor" href="#简述future和stream-的异同" aria-hidden="true">#</a> 简述Future和Stream 的异同？</h3><ol><li>相同点： <ul><li>Future和Stream使用场景都是用于异步操作</li></ul></li><li>不同点： <ul><li>Future通常都只有一个响应值，而Stream可能会有多个响应值。</li><li>Stream是多个Future的组合。</li></ul></li></ol><h3 id="dart的jit-与-aot" tabindex="-1"><a class="header-anchor" href="#dart的jit-与-aot" aria-hidden="true">#</a> Dart的JIT 与 AOT？</h3><ol><li>Dart 是少数同时支持 JIT（Just In Time，即时编译）和 AOT（Ahead of Time，运行前编译/预编译）的语言之一，语言在运行之前通常都需要编译，JIT 和 AOT 则是最常见的两种编译模式。</li><li>JIT ：在运行时即时编译，在开发周期中使用，可以动态下发和执行代码，开发测试效率高，但运行速度和执行性能则会因为运行时即时编译受到影响。</li><li>AOT 即提前编译，Dart语言将会被编译成汇编语言，再由汇编器将汇编文件编译成适用于不同体系结构的二进制代码，可以生成被直接执行的二进制代码，运行速度快、执行性能表现好，但每次执行前都需要提前编译，开发测试效率低。</li></ol><h3 id="同步和异步的概念" tabindex="-1"><a class="header-anchor" href="#同步和异步的概念" aria-hidden="true">#</a> 同步和异步的概念？</h3><ol><li>同步: 同一线程中, 按照代码的编写顺序, 自上而下依次执行 (直观感受: 需要等待)。</li><li>异步: 代码执行中, 某段代码的执行不会影响后面代码的执行 (直观感受: 无需等待)。</li></ol><h3 id="dart事件循环机制" tabindex="-1"><a class="header-anchor" href="#dart事件循环机制" aria-hidden="true">#</a> Dart事件循环机制？</h3><ol><li><p>Dart 是基于事件循环机制的单线程模型, 所以 Dart 中没有多线程, 也就没有主线程与子线程之分，Dart单线程是通过消息循环机制来运行的，一共包含两个任务队列微任务队列（Microtask Queue）和事件队列（Event Queue）。</p></li><li><p>Dart在执行完Main函数之后，Event Lopper就开始工作，Event Lopper会优先执行完Microtask Queue队列中的任务，直到Microtask Queue队列为空时才执行Event Queue中的任务，直到Event Queue为空时Event Lopper才能退出。</p><p><img src="'+u+`" alt="image-20230508150157425"></p></li><li><p>ent Queue的Event来源于 外部事件和Future。</p><ul><li><p>外部事件：例如输入/输出, 手势, 绘制, 计时器, Stream 等。</p></li><li><p>Future: 用于自定义 Event Queue 事件。</p></li><li><p>对于外部事件, 一旦没有任何 microtask 要执行, Event loop才会考虑 event queue中的第一项，并且将会执行它。</p></li><li><p>通过 Future 实例向 Event Queue 添加事件</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 事件任务</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>Microtask Queue的优先级是高于Event Queue的。</p><ul><li><p>使用场景: 想要在稍后完成一些任务(microtask) 但又希望在执行下一个事件(event)之前执行。</p></li><li><p>通过 <code>scheduleMicroTask()</code> 函数向 Microtask Queue 添加任务</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">scheduleMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 微任务</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Microtask 一般用于非常短的内部异步动作, 并且任务量非常少, 如果微任务非常多, 就会造成 Event Queue 排不上队, 会阻塞 Event Queue 的执行(如: 用户点击没有反应). 所以, 大多数情况下优先考虑使用 Event Queue, 整个 Flutter 源代码仅引用 <code>scheduleMicroTask()</code> 方法 7 次。</p></li></ul></li><li><p>常见的API运行时机</p><ul><li><p>直接运行</p><ul><li><p>Future.sync()</p></li><li><p>Future.value()</p></li><li><p>_.then()</p></li></ul></li><li><p>MicroTask Queue</p><ul><li><p>scheduleMicroTask(()=&gt;{})</p></li><li><p>Future.microTask(()=&gt;{})</p></li><li><p>_completed.then()</p></li></ul></li><li><p>Event Queue</p><ul><li>Future(()=&gt;{})</li><li>Future.delayed(()=&gt;{})</li></ul></li></ul></li></ol><h3 id="谈谈你对isolate的理解" tabindex="-1"><a class="header-anchor" href="#谈谈你对isolate的理解" aria-hidden="true">#</a> 谈谈你对isolate的理解？</h3><ol><li><p>isolate就是机器上一个小小的空间，具有自己的私有内存块和一个运行着 <code>Event Looper</code> 的单个线程，每一个isolate都是相互隔离的，并不像线程那样可以共享内存，这样的机制，就可以让 Dart 实现无锁的快速分配，注意Dart中没有线程的概念只有isolate。</p></li><li><p>所有的Dart代码都是在isolate中运行的，一般情况下, 一个 Dart 应用只会在一个 <code>isolate</code> 中运行所有代码, 但如果有特殊需要, 可以开启多个 <code>isolate</code>。</p></li><li><p>创建 <code>isolate</code> (Dart API)，Dart 默认提供了 <code>Isolate.spawn(entryPoint, message)</code> 用于开启 <code>isolate</code>。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:isolate&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;start....&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Isolate</span><span class="token punctuation">.</span>spawn<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>eachFun<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;end....&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">eachFun</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;item = </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">item</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>isolate 通信 (单向)</p><ul><li><code>isolate</code> 间可以一起工作的唯一方法是通过来回传递消息. 一般情况下, <code>子isolate</code> 会将运行结果通过管道以消息的形式发送到 <code>主isolate</code>, 并在 <code>主isolate</code> 的 <code>Event Looper</code> 中处理该消息, 这时就需要借助 <code>ReceivePort</code> 来处理消息的传递。</li><li>在启动 <code>子isolate</code> 时, 将 <code>主isolate</code> 的发送管道(<code>SendPort</code>)作为参数传递给 <code>子isolate</code>。</li><li><code>子isolate</code> 在执行完毕时, 可以利用管道(<code>SendPort</code>)给 <code>主isolate</code> 发送信息。</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:ffi&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:isolate&#39;</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string-literal"><span class="token string">&#39;dart:math&#39;</span></span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;start....&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建 主Isolate 和 子Isolate的通信通道</span>
    <span class="token class-name">ReceivePort</span> receivePort <span class="token operator">=</span> <span class="token class-name">ReceivePort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建子Isolate，并延时3s后向主Isolate发送消息</span>
    <span class="token class-name">Isolate</span> isolate <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token class-name">Isolate</span><span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> receivePort<span class="token punctuation">.</span>sendPort<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 监听子Isolate消息</span>
    receivePort<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;受到子isolate消息：&quot;</span></span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        receivePort<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        isolate<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;end....&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token class-name">SendPort</span> sendPort<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Future</span><span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duration</span><span class="token punctuation">(</span>seconds<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sendPort<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建 isolate (Flutter API)，Flutter 提供了更为方便的开启 <code>isolate</code> 的 API: <code>compute()</code> 函数。</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> args<span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span>
    int result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">compute</span><span class="token punctuation">(</span>powerNum<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

int <span class="token function">powerNum</span><span class="token punctuation">(</span>int num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="dart内存分配和垃圾回收" tabindex="-1"><a class="header-anchor" href="#dart内存分配和垃圾回收" aria-hidden="true">#</a> Dart内存分配和垃圾回收</h3><ol><li>垃圾回收器是Dart运行过程中非常重要的一个组件，它主要分组Dart内存分配（对象被实例化 instantiated）和垃圾回收（对象处于不可达状态unreachable）。</li><li>内存分配 <ul><li>DartVM内存分配策略比较简单，创建对象只需要在堆上面移动指针即可，内存增长是呈线性的。省去了查找可以内存的步骤。</li></ul></li><li>调度安排（Scheduling） <ul><li>为了减少GC最小化对APP和UI性能的影响，GC对Flutter引擎提供了hooks，当Flutter引擎侦测到App处于空闲时期且没有UI交互时，这时候就给GC一个空窗期来运行，并且不会影响性能，GC还可以在那些空闲间隔内进行滑动压缩（sliding compaction），从而通过减少内存碎片来最大程度地减少内存开销。</li></ul></li><li>垃圾回收 <ul><li>Dart的GC是分代的（<em>generational</em>），由两个阶段构成：the young space scavenger（针对年轻一袋进行回收）和 parallel mark sweep collectors（针对老一代进行回收）。</li><li>Young Space Scavenger <ul><li>这个阶段主要是清理一些寿命很短的对象，比如StatelessWidget。</li><li>为了确定哪些Object是存活或死亡的，GC从根对象开始检测它们的应用。然后将有引用的Object（存活的）移动到非活动状态，死亡的Object就被留下。</li></ul></li><li>Parallel Marking and Concurrent Sweeping <ul><li>当对象达到一定的寿命（在第一阶段没有被GC回收），它们将被提升由第二代收集器管理的新内存空间。</li><li>这个阶段的GC有两个阶段：第一阶段，首先遍历对象图（the object graph），然后标记任在使用的对象。第二阶段，将扫描整个内存，并且回收所有未标记的对象。</li></ul></li></ul></li></ol>`,12);function h(f,y){const t=o("ExternalLinkIcon");return c(),l("div",null,[d,n("ol",null,[n("li",null,[n("a",k,[s("Future"),e(t)]),s(" 和 "),n("a",m,[s("Stream"),e(t)]),s(" 类是 Dart 异步编程的核心。 "),v]),b]),g])}const x=p(r,[["render",h],["__file","dart.html.vue"]]);export{x as default};
